{"_id":"react-streaming","_rev":"118-82b72a83261bc9d32ad74f4cb4a678d1","name":"react-streaming","dist-tags":{"commit":"0.3.40-commit-d57fb4f","latest":"0.3.42"},"versions":{"0.0.0-alpha.0":{"name":"react-streaming","version":"0.0.0-alpha.0","_id":"react-streaming@0.0.0-alpha.0","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"dist":{"shasum":"ab3d8365b08dab8cc69134eec8dcaf1613fa27f1","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.0.0-alpha.0.tgz","fileCount":4,"integrity":"sha512-JgfNT8uctEuvpv8M2Dg8h5btbAv41LNdSW9llrJFhHXBzjMfkHrCw8UHPc/eVYK+jm9CkIXBNeqcaxPP0sGECA==","signatures":[{"sig":"MEUCIQCh2+j2ZQk2DzjIWeGlQE01eX6o3EvcUHzL+BTLuBv8TgIgHCN5DJWofYLTMbUFn/k0ozLtQu+J9eplV8Q8RrPxB30=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":6079,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMJQ3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqYXBAAkmJt85QRdBYB+DJ1vAar2Hq5dgAQFVKm2A26h5WP5f+82wyi\r\n0lZ3yPW2+dvF1i9dzq9SYNNkq4LjKCT72808/lQnrHMfg8rNhTIzY2rUocT/\r\nZbaAZonycjDsI3HDPJddDYlluGX8gV7/gG7XuAcBp6BB/y6SjZlgiQZcTCBZ\r\nzLsRvrvFPEI+mQuiAp0Cdv7sSMlrJBK9JzzvbsqQaUud1yt4Olcf1XCwGiKp\r\nL1m1uOtS59VPAzjKeFGF/cdjpiH5G5llEz5ks/qPCKOsjf1ZbA+twOpfPKBM\r\nkCCgvhexK2EpEzdJGjIlS531l1DWN6cC9JA1joG5oxPAHT+wmXQdOh4haUsq\r\nJKB1pGRpdtIke59SRB8UH1X1NYTUqd9F/LhU+6sqJnp9h5AP/9UU/7UghCYm\r\n/P0SKdigyeDs4B64KYMYEVtwGxsIIMCQX/WdZoERLCeyGcYg+mrQUdapb1aM\r\nhw/Ai8oqYIusbRvJEjf6RYlFjeQZAuT5JsINlAWt2wWqW/QWBQvjpKcN0uql\r\nVy1BjdqlGVq1Dzgrl8hK4IKDboaxryPjwWOBS1yldIjk/zDuDtwwojc4BZBz\r\nw830Mz59ObjGYqqk1chzdGTfhO9+wnYlLQ9YB+6UK+WcgaijAMi26kFipRdp\r\n8u0Z10r2vL3J2PsTuPbgbDRhPFUf7haDbIM=\r\n=Nxf6\r\n-----END PGP SIGNATURE-----\r\n"},"type":"module","gitHead":"90fe0f39e4aa47ee934b107039486245c4785c1d","_npmUser":{"name":"brillout","email":"npm@brillout.com"},"_npmVersion":"8.3.1","description":"This is work in progress, stay tuned..","directories":{},"_nodeVersion":"16.14.0","dependencies":{"execa":"^6.1.0","strip-ansi":"^7.0.1"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.0.0-alpha.0_1647350839446_0.7087575092621361","host":"s3://npm-registry-packages"}},"0.0.1":{"name":"react-streaming","version":"0.0.1","license":"MIT","_id":"react-streaming@0.0.1","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"af6be9c3369b546b9ed4ccbdd24e68d07613e663","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.0.1.tgz","fileCount":38,"integrity":"sha512-lqyt0NGLYKCm4hrn2eRCAyuNY3BX0gF9JX+nuZqftdyBW2OcoTg4KwNT4u8SAAVQ5UllwUGPhMp9t2VRo4wzUw==","signatures":[{"sig":"MEUCIGAqT5bVITm6GF55js9kAizDQtt9iADgmRr/+kpya1shAiEAx5ZJiASDyrwq2gtSP3T967CvbTkQEBcpojH0E1eCAHI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":36008,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiYszQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJLBAAkWb6ybGD6dwmXzhKw60m17wYfUYVCB/CQ2voUewDKmw8+QsT\r\n+Wgpybvt1a4hdbbRDDZoZx6OS3Clt9Kt17++5IHgqmCXPb8I26Dk5MuNarhD\r\nAh4ZD/nXU5tuaD/zx4jvLym4+xfGBBJnoGUi/4FHNVQxxDm7DsxGq5fzku/q\r\nUPBQsUcoOiLB5TaUoHa6fcFxTNKsts/WssOVUtOC9LmMb4UHWF0/1K7VkiUe\r\nQ1HaQMaAM1MdmGKher0U4/QphEt1EMoZ0gisNx60aNs4yloDeNu9Lf6OAY7l\r\nPXAGO9LN3Fm1xu1ve/Q1fbzYv2xjlvqr+qsG3Dg+vwkpREH28ZakKJkLstqt\r\npABdXQsjvlaAae1vYDVvL6Q2py93fDNGpR/r6+XEKjTOas7ycZmU1TOyrRcg\r\nZMGtaSDflTJzqd3nLs4fgryYaJOT60lMZRkDCPXIYx+B/9q13uLVGmec/tU0\r\nq6n4i9SUosDKz6TsghsGeke+b13DGBpSFUfy3plZ1n+2zUJOowxNV4MOeyU2\r\n0EA7Qrp7mau6sbnZ2YzQmZEJ61WNtRhuRudCr43qFJkPhttD2VbQd1O4jy8R\r\nyRjymeklnO3rEQNzMa4pKVQ+02wawOvu9zJSYS55hd70EEwoJANmMHEDbJkc\r\nSX4nVe+tgY9wdibeiQfzpwbPxI4Rg4O6TtM=\r\n=wkVw\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"058d69798c69a962500b3fa68292b6b4d8834cbe","scripts":{"dev":"pnpm run tsc:watch:cjs & pnpm run tsc:watch:esm","build":"pnpm run clean && tsc --project ./tsconfig.cjs.json && tsc --project ./tsconfig.esm.json","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"pnpm run tsc:watch:cjs","tsc:watch:cjs":"tsc --incremental --watch --project ./tsconfig.cjs.json","tsc:watch:esm":"tsc --incremental --watch --project ./tsconfig.esm.json","prepublishOnly":"pnpm run build"},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.0.1_1650642128399_0.33282784280918776","host":"s3://npm-registry-packages"}},"0.1.0":{"name":"react-streaming","version":"0.1.0","license":"MIT","_id":"react-streaming@0.1.0","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0901e25d6b197b028bc183c65a4897a4d10ca7c3","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.0.tgz","fileCount":29,"integrity":"sha512-7iNM6frSJ4ACyNGfhomonoWfOy2+W1cRLjJoztw+eYBKVNIpE45Klpd+NbROGYjSUIaTu9X2WgYFD5wQwIpelQ==","signatures":[{"sig":"MEUCIHEph2EyVTj5MvAsn01PL37HskVsZWDFBpq+zeFsB7V0AiEAiGFZ+KjAauQ4tCa0LZcynj1IfoW3CFbDyO+pyYG8mYQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":28132,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZGEIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2XBAAkM1zblua6rRloGTx1wRi7sEdWzew4vEOSP9ejgLzKsLGEBkT\r\nwIgelctS2Eb41weYTFfqAXsg+7T8rn8pIPEsLywd3Ie0FWrFNLxt8aTOIR7+\r\nm+8XwsEzMrWvOg5rB3BhPiDgXpilur4DdcF4NtzgiFKULw9fsb7LssqgI1Q3\r\n1tOBP9tVAFsMRXl9J4YwN3BlhHGCfCq7nrRp4dfxdLR8THvLBROamit7s9ID\r\nq3h/HR3brM4nlh0cvc1tqcf9fxJcqQ6W+cuTnEHFnYPlY/g2sX6qQjI9zaBp\r\nNBjh/AWXwIkaIf7keCskhVb1n67/yl9FNbQSJLQ4T3Dg4iFa016CZ4lsSDcQ\r\nZiIWeFt8OcZ8f9iUGgorF0WaEhx0OvuhmsTdctnkus5rblH4MsJPIlRgRbFZ\r\nYTZBxg0tA6EDgpKuzukKOpYNiZ8npAypmaO754W7L8I77vIrw94KVUagjeJo\r\nmdhAe4Usxu8I9YoygtRrbYbD6OmpmvzwdXF//3gzWv54jM6rWaAwSWfq8ySu\r\nANSr57gdf8l2q5logxTffVxfI33XIvbDl5zPDVnT6nzrqTxBDIEqrhqyZMLF\r\nQOfiJz5h+3/KFaOu8PCVGmrp62LIexgDCv1oy15hiJfIaeM1FK+07OcHDXPL\r\nauaR2XtBxwQWeLYl13SGPQcHvpWQpNK0s9U=\r\n=Trdp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"0add99644349b17b664951023ac4e3d8fd3bd3b6","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs & pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"isbot-fast":"^1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","vitest":"^0.9.4","react-dom":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.0_1650745608484_0.21706677208026504","host":"s3://npm-registry-packages"}},"0.1.1":{"name":"react-streaming","version":"0.1.1","license":"MIT","_id":"react-streaming@0.1.1","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"5652b6e3fc3f42126815959bd9084d4b52376f28","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.1.tgz","fileCount":51,"integrity":"sha512-KLXBfBwwYtDRi3HZ4zz5VoTnw0t2GU+fU5O+HH3T3+zVB3ib8ikiMb7bpmXiQmERYxnEa8c5PfVgvUqqHcmE1Q==","signatures":[{"sig":"MEQCIEflwW506Gb+0KDpL/Xui/YuNZOkmuPBanaWrdLDqahbAiAVM963sMNZlXEFmne1H5fSlLs2F28XGNbyiy6fgZaX3w==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49996,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZGKXACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmogrA//VtrSgo44ifXBXcehu3sbWAWtCVZDIZ937ZRt/nR4vgO5+ADf\r\nT8p/5TIaH3gv3YRu5jSH/hJY+8eeD9d+ZLQ8THLQ1FdEv1HRdbICYZS8SSLs\r\nt8HboSkNDhTlE66TmQOqW/vOzTMwIacaZ6TK07snxhUqmoarbqE4iOa5ma85\r\nl0AMzTgYGTzgiLFoVpx+B3WrWU3k3MCgPTP1n8C1BvQkRJCpglAF0/tjdG0n\r\nswtd+/+p2OMt4ozInFIXJVttrkmZu5nUotZnwoYH2QKjXwX3LUPxX/WN8oOG\r\n0ww7bqrLp6Cpzw74enUDkj8y3NkMoV1YNbgaYBFaaq6bWTL/stozyYdTmEhC\r\n4qqg+I1ypZ4OfCT4S1dRMtmnOehJpXQCwKmDjPKMQZgXZVoVKhnayE2pjmwq\r\nLq1gkYwXrpgiLkTwBq1MLj5nhgoDw2VisISnQaJOquztfPiu48MCIJpuKoe8\r\n/YOL7nvtfYVJjULJIEEkghX/SIDD3JMdFwzo1+r7p84cfbSk/5vNFRvc7lP4\r\nUT+sqyD2TAZnW7Vpz/Xzf1AF3C4OBALikPqJKmuK25y3GudtcDbK/7jQJnsU\r\n0lJnNh+CV9mYHfT+im3iFVe6Z1OIukk++RnXDBoLdI8gjuAOuTzxQk7YEvoB\r\nOuDPDuMyJA1tq16pcfJPjS9ys2sSQCwgqBY=\r\n=ur3c\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"ce8a5df94e08a30a1d6621485218fe1d8c877caf","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"isbot-fast":"^1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","vitest":"^0.9.4","react-dom":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.1_1650746006827_0.832961500255045","host":"s3://npm-registry-packages"}},"0.1.2":{"name":"react-streaming","version":"0.1.2","license":"MIT","_id":"react-streaming@0.1.2","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0330dc95fac8ab00d6a00ce68368160e12028040","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.2.tgz","fileCount":51,"integrity":"sha512-ZFBJDX2Tk5ERg/+5ZIfF7j8gPxuAxtnO4VzMGx037A07nn6wtUCAiGXHDKHg87FO9zuUCBH0zmQJqucdF+38BA==","signatures":[{"sig":"MEQCIHedCdr07GiFqeHZ5tReZOgJ/Ded/zSzAxI4heWSr1FnAiABcxOP5RpJKx+KmrlSzXTrOjOmkB0ptlIoRF+q+WECzQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49914,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZGP/ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpuTg/+JGUhKvaclumu+718ogZsse9bEGP9EssaNGPSmzr2K7QAgc/p\r\noDlKZuq99gnBUl9DXnLdnu1exLQ+UqQ3mEbJ6SXLf4cpfQ7ID3fmKQOr/k7N\r\n3zenj0oVMjwPobnyKYWhjrsFNNWmU0YeFZTw2kBpUMC1M6R3DqLiGViy8yIa\r\nqQwDC5rMaq+YD+FGQHXiSa/guttn1t6zy4GP1DTJvIumG9a30W1FvDXWZoXj\r\n5swd38hKVpvC5I/zWyxgQ3oj/8ZGKVi4o9lAP3M6tCC+NOPolvw3beYWZtR/\r\nwoVhgXIJw5avu2c1Tr0aL3lSqugKFfqTJuH+a+WWJJUAb9ZF2OZCz/pYh6ct\r\nrMUPx7V2buoND2vJahgLOOTruMd5ilagtiBSbLnKKbfHXkxO1c5drYDXgzWT\r\nVJCIehAa8lLo7qXBUfnIr0K7XinJ3kzegue8991loMlGyZe2fuPPjvEaXJDJ\r\nkmipvXeMVY2geHRsOvzlatY5+ch495Yp92S8Vtm7sBdQZ1AnWzPl0lPei1/2\r\nqNj+VA3fOTIa+G8liBx3inKQM6MehceOwS8iwwfLi2xO+b4Sg0hSOXJBBzu1\r\nvanK78v8aa2dXluYxzNNxlOtYr9dR6cPAx4UwRkwKnLixglo0i06E4CJQCBZ\r\n54ZzPyHN8MhUsCsg7rTUriYTHvlCkHhQvRo=\r\n=cdqI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"851debf52eb18aeb628f7139d778e2ec0559cf2d","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"isbot-fast":"^1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","vitest":"^0.9.4","react-dom":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.2_1650746366945_0.593032374240515","host":"s3://npm-registry-packages"}},"0.1.3":{"name":"react-streaming","version":"0.1.3","license":"MIT","_id":"react-streaming@0.1.3","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"ed073e6e8c1c76fe8ed86f59b0b38a7f6a7801fb","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.3.tgz","fileCount":51,"integrity":"sha512-vk2Y+rNSh4yt4K6LRQgl7v8gCMbiU+/lyck6jE4mII/s7CGc4nq++6rcN0UAgk+fkCpK6tbEKkuMmWB1SSl+yg==","signatures":[{"sig":"MEUCIQC5o3eKwG+rH2DjvDuL4CRfpqvy6UdugYycQ6hScqODmQIgBM7Gtnqxvxi1Iv8ejbqCdf1zx5CytVJGoO1C3T5TKro=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49850,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZGSzACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr8UQ//YwrHGiKZxu4dpsBuz90saP81XQoABsZ9QBvSxLyEZpvRgS2O\r\nVAWxLzEQoX6AwWn3s2bwVkbLlrlYHENIyjmrgx8mYW0viE3F+s5t9WYpztFW\r\nrm5m5ET2szQ78PKASyhh1VWMSCtcb4Akh8THuTWoGrefb1zqREQmLzPg31m6\r\nPXNKEtZjbYKtR2NIMd1WftrGx6LWgCz6xOKsBwpomB5HckIJSfgyimZDMlO4\r\nbnkQ++04nEsdzUBypcbPOxFMvtEOGzjSvhJzpvNw0EYIv3rnpzUjBWmZcrpa\r\nDXL3z9dKfTKZ+7dzgMz2UQsuV/mfO+aIGa1fSOSUH4LIyEy4G61CCDUj0QyU\r\nQUiaIBxRUItx8LCBXE/zGK23A81JpMGPIrmVheFFiVfGyOfH4Jw7mxpi8QeP\r\nzgcJDzIxcoMauGouu2AfG3FGwZZbC/mMh43lJ7Niy+ZiPUxs2YYRQZYJOYwc\r\nmumMbuvQ/YmNT8iwxiCgjkqhCKR/0je4Jkj+FIMxgetNQq1YUN17woCheqS3\r\nyLHaREf0ynh2F0bOF4wcDZzugjPoLVcMBjkk3+/L4jnRny1EyCtuqSv1ojYB\r\neIs25Dowkq4ppwl4jqJR87yWQmZ8DpBgHHKIuM3Kt80592ReRoBx9AkberaF\r\norB0R7sFX9Gm3cVBk1ZG/CWFPL936Vif4cE=\r\n=sZvA\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"2b75b532061e06d367b997cb0fc2290c1645d8fa","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"isbot-fast":"^1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","vitest":"^0.9.4","react-dom":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.3_1650746547304_0.8606820473460257","host":"s3://npm-registry-packages"}},"0.1.4":{"name":"react-streaming","version":"0.1.4","license":"MIT","_id":"react-streaming@0.1.4","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"9f3fb785f8acb1a6d8c3a862a5fe033072031009","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.4.tgz","fileCount":51,"integrity":"sha512-nEdGfA+13m2+SQvg5cOkQ8kPSxxsKc+CiprkqVCrZctvucGr4b9IH0SS7kgmRy8473U+H+a39zTmtYOkE9IMXg==","signatures":[{"sig":"MEUCIQDZdZptBehyj+rMB/XekSRUqucIwjDng/tJTI/uA5RekgIgXGwooTxdWOGrMOU5HiT6EAP21tAf3Cq6JrGGUycdVX0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":49978,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiZGW2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo/Jw//TSlAfQnfPOz27pKhDMnlf9tpgAVIFsjRypzQ697GFbv2U0/b\r\nD+u23va8D8e8SRMzaoFojkmMkc3Qya2fZIvt+glTzbS9p6Zzaee5E7m4rN36\r\nMRLJEdim5z7Qw7FQDiyH+DYVBkqdXT8xY5yv/5PkUdLcZEVamiR4szUoaw4g\r\nA+LdVlbj/jITuOGui81Rjyo9LIhMSktkOnUBTeazETJp6SjvkQ20CLjiQcru\r\nG0e9icBDBy6LuTqQclkhlyaCYzSHwpPcOPIKwVwgB0zjTkf/ZUVHpmL9OY9L\r\n+nnGy5JhvMRN1bqsN8qK/ti9TzOPDoScRTgDK5oM2i6itFMjOsFgevGcPfgh\r\n6tY8W+xu2E1jx9bjhXsIC6pA+k+HiCsBA9UgJs/91R9D+FQjDNlIMHJ552Qf\r\nZ2f1Imvi+8Y7qHL2D4sP9Xsm2MLUVEdl7OyzZInOkI9fx4xtBtP8cWtbFXLQ\r\n4S3e1kVG/38aQqbgNdFLCDSfKyT1ph5f7dUpGg7RZM8Yx/g0SC2l3aCNwQMg\r\nOCFXnw9cyvZq/8K5v1lRisiEmg9Oh3sxknokqfrqtqg6YRUq+D/gUSk9O+U0\r\nyaooNCi5PGKsoNS9S8znXevAeGRZokFG7qVrLal4ZXLppxiMgDBc1Abd+KSg\r\nexLSzj1QybZD2TTsWb+E3e5NqfxZMu3wH5M=\r\n=9/5q\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"e90e29690d1029050ec06f923877fdaaa1209f5d","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.3.1","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"16.14.0","dependencies":{"isbot-fast":"^1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"^18.0.0","vitest":"^0.9.4","react-dom":"^18.0.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.4_1650746805899_0.20312788384901892","host":"s3://npm-registry-packages"}},"0.1.5":{"name":"react-streaming","version":"0.1.5","license":"MIT","_id":"react-streaming@0.1.5","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"8975c6a3307c597a2fe1da94c7b0de6b3e1a4e2f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.5.tgz","fileCount":55,"integrity":"sha512-8wnvykwoG5qeFBUz/hYMK/WuOXGD+e8nFyMEclBPHms0lBiUGhsrC9Hiq3Ynoox8MZbyTHg8zpAStpJsAzvgmg==","signatures":[{"sig":"MEUCIF86krPAACzujnLDb39GfG8I/ApcX6qIcZ2pJpddGyifAiEA0cctqpZRC61h4BoVrsUqOKXNguo4DOgjAGbbBVNsQSc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":52963,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaVzbACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqjvw/+NlNZIRtr11NuWbQ1dWL1RzkqZqEsxxaHdNalR4FDoVInhWO8\r\nJUlaYVu0DMOcQZjVIkpM77UKMpZ6pWFCAChEF4385aBc6p33l2lqTjkj4I5z\r\n35n/f/cSJnpLeJSPichLNzlWK/dv+H54BDpOjgtXlL6V8Gc77/N5t/dDHIfe\r\nAAbQ0ZEFSF/LDHR7awCWAUFVo9JjIjAjzbRvohdMHQnBXighrhOSpIdPE+4R\r\ncHmdRSZGslntUz/zcfXKZyIkVmKclw2ePVxnAccsFwVKvsL1TXLaIRDffR7I\r\n/Mu8D3RHMoZPtkLQmsVBPC/6UGw9EeC5eStOhGfW/Vn0F1/snZAJ4Y25MA36\r\n9pJNPg3/LoJS4xnyR6VcqROzKG0fsvr5P0a7EoddvoV4/Ig8r8PG3QAbP73Z\r\nYdTBEpfCaCopCmjhZvUE0xMQ18E1EPnZUEzG4Rc2Y1gvxqqbHrtwav5Mn4qE\r\nPrRiAR+n3TzoJv6o0UOxFSBhbB+z+DjtoBZP2DMPxkjz3QJyXtIcMWCg1E0I\r\nkiiVaW9A6k1ALdppykl584JefA12wwUTI7sgNFfkq8p3QkBrmiJIorT2Sef5\r\n2dmj68JeA4KJfGR8EJOVEvGJFJRFFDelmAJc2XG0pJb/iVAO7QNxLwkjJd6W\r\nqOyR0mOAVqX1m/DfIdj8DGknfkLqDhPgi7Q=\r\n=m3u4\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"80240c589ec8597c80d7cdb8354e31069972295e","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.5_1651072218830_0.5325058816803243","host":"s3://npm-registry-packages"}},"0.1.6":{"name":"react-streaming","version":"0.1.6","license":"MIT","_id":"react-streaming@0.1.6","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f009408bc549dbf361566a9ed1ef48016800b17d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.6.tgz","fileCount":55,"integrity":"sha512-lMSktBpeVPp8Iy/52DNBJFPA1BpdvAkieWMqeM64FYx4isnM8UmZcQZ6sZOGeOtN0ArK6JRtQhp3zcR1YiFryg==","signatures":[{"sig":"MEUCIQC9Af2NmWh0MFivJHdZQibB18MX3PvoUhKcbZfSF+QCQAIgW6AdZ49vHjbceq4pEfcZ9cxeVk6z3U6/IYsYuKrZDEw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":53028,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaWSvACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpZ2BAAnuMNORReVFAXpW44kNsAieZp1ePBAsQosYsxdJf+C8VLh98f\r\nHh0UiwbFVjkxSChk1YbeKwN3YXPtJElqSJ9QaLDIzt52U9UJWYREizu7oIX9\r\nPnyp2ENFgtfbKZsbyisRDP2/ZbvEiLmd/o7OncVbHBQsoOK4kAdEVh7pYup7\r\nfrvrdFIzm1vLrBgjMAeZtsnaEmKgekp91gmQH1lPdbkNjkQN5+2q+RBhm3JU\r\n0RycHP8Sy0LK+UrMY2j/CvlcmCgZGxYf4XWuJOU94+J0ZoV06qRjwKqJC83t\r\nBDUKZnMzqmpzZ/PXUZ+bVl2U6PnyIzqk4QoSYvnwwBK8DROi75Pq7sdfYAda\r\njzbHBNyUUpR7cp5OZALvmDLT5dIlKpczQl8b3wNAmG34A73QG4ZgVTns6NCM\r\nszeqtBFxwMnTZkvkjWObjj+tIHqT6vNfPeTlYBH7JtX49mTXOGm5DJUDxxNj\r\nLbF8Fz8FjpTapLPvQ19OV8CLQ3C1aH5zWDOdqFdattoPPHjiqmg+3/r8gLai\r\n2s+PVe5/SedxDAsxmFhHeShnS+u2573Y2I7YiTrflLUCDn9AwZDHOdkQG5Cr\r\ngVs8uhc9pI2R7qHGDuJqVn+7LPX3+gJN7onzpRCl/Tl6bsdfQXlqrjRd2y8l\r\nl755NUIZDhpHYlkeWmfiHimdhSsOlGAIPfM=\r\n=cDx5\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"5528815f7eeb938838e87f7f0a8d07302b044a53","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Made fully-fledged & easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.6_1651074223791_0.8781046054546291","host":"s3://npm-registry-packages"}},"0.1.7":{"name":"react-streaming","version":"0.1.7","license":"MIT","_id":"react-streaming@0.1.7","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"3e636aa141a54631d46354908466d87dd3631d1a","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.7.tgz","fileCount":59,"integrity":"sha512-TpN2m0CLeTdxVn8YlSa2yWyOFHLhUC09j6eh3/e7SoOS8oBAgzqiqPwz7QdjvV32O0z0vzxdGwwSVljFNo/7jg==","signatures":[{"sig":"MEQCIGgRdosoiZs+U0cYbm2bHfLMYM5TN+zlvdqCLf8OQEyDAiBeGiZMiwtQ/o3XVOcrZ2yySrgGWQkhckUPcabXtT4kBw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":55948,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaoeEACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr08w/7B/xAB/Hy5g94yDf6EO5Hmfp1eVT98mLi1Pjca60i/e2Qlfgk\r\nabNeOwhS3e8VIZehOCfTVms6BzuONcoNpoOrD95QiEorWtp4gkkfUXWzMvar\r\n/EcFELXYt0+ITyul7WNTzICPvmQ4K8wadWCNAaflPo4rCDB+ivrRylB/oOcW\r\nfCTrvVawx8dscYkB1Ftw5Miv4yrRLu41aEiR4ekFiDxFkAHqPtFSGn/qyJCU\r\nU/0DBMzk7JNi5g8GQp8L5zBOkCWncfS7YSbbkESelmuYVgTCwSvW+e/AEM9e\r\naRdTX/rThq42mAXL+vMppkyYpgpdroCEkRCfGRJ7uOa8c0jWmG1KcPhi5Tne\r\nIxJ0DufeOuEpGKZVaOfjfr5YcYB+dyhFikDISzx/+OJ97zobHrj8AsZNmtsd\r\ngE9iJGowPBSrEy5D7v7FC+Q2t02OkexC9sBGPR1vg6hAMCDxPRqnl8VkVnRM\r\n0eSowA6ePo4wi4e+iemDaSjSrDZIuJwFL+ttXoPUobXJTU7qILxolCoWgM1V\r\n8Bdz4boA+7aZP2o0rcKZVYO3WIa8agb6sOrS3fnbz44aPCzVvxdoK0NW1TyJ\r\nmd+9yvN9xZZ5p9ZOO6cBNMFnna/OgyvzFH/Z03fUEeOXjvf6dLhg8+e6prqT\r\nQ+/RBuEww1Jhl+1IqFFU4WgZEMX5rj1jSBI=\r\n=hDbb\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"872882a9ac51bae07d984c913c6ba1f60590efb7","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.7_1651148675820_0.6341275416799532","host":"s3://npm-registry-packages"}},"0.1.8":{"name":"react-streaming","version":"0.1.8","license":"MIT","_id":"react-streaming@0.1.8","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f4f6db6ebbfacd800af38083730bbc77ed57ab39","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.8.tgz","fileCount":59,"integrity":"sha512-PcKthL34Z9FY3z8jJFLRcAcFT/6reT1Z78XQvVkLroIlKOpjG2iwE2++qB2uGW6WG2xV2lODh6nCbYXiD80mOw==","signatures":[{"sig":"MEYCIQDiPlyhYg3wEmxRpqH2HNQZpk4w6NtoO330+u9VmOYLMgIhAMJu6rA88a5x4qSKjMkTIFv9jilY9gbThy/9lGutgCxf","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":57519,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiaowsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpW5w/+OyXI+0xTya8ZTbnbXYH826dPACf+yKpvluHPWjrbXubrTFyC\r\nFH/pjJfWHKbTEVoRXZIdGfanM4aXvxBad/Ptf+iquVjq0wCk0GuXELkPT9Gl\r\ncqXw5o+H8hIFFNjhQQnCaibkWZ+1XSYcLNNNtPT8UubmrJlXEiNYy0eHNJXz\r\nloK9a8G83t+uljoYk8T6qJH9N0YJ6+pLpuITaw9yD7mcx98OwRkwf5FpZ1Gd\r\nG3Cvr77GkTrYY45hmSxOu+BvkPAHEbI4oWoLdT3Yc789qchojISAHu80Ah5o\r\nyg+7QqeT9oq53rNHhHHvfPONFzWOuFsHzJF7/5BPJRMjK8KmM5t0t5evfn+W\r\nQDLvM9G0nls//3mIkiW8CGCy3pMAMRxpwUkD68vuOkVfL4ovMqGa74Vb0LR3\r\nY1FVbi6JX9P0iNtvPDj2D8JEkZXHZaUW5vIxQx8zhYq/4AOugrxAUrNEa2d2\r\n8jo33iQHIdy5ylR2N2FtmHisafdTizNAN58VmiQUl6KrgZYooogcVtGii5+s\r\ns3gFQzlz14dTdw65hYttSPsOfeLFCK6AsUrJXtyZHzLUJem2as1u8qafN+Nb\r\nI2GnGzsy4PW1CppgpgoDckIv3twB0vW9Ko5eZTMQa0f5KDOctTmo5LV3Ny+f\r\nR0v4AJCa4ZHLvjPhKjWoU4rgIlnSTs20w4o=\r\n=NeoW\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"31f6f758f0f6a73fd59c54c8416f2123569b0301","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.8_1651149868332_0.8459170937967659","host":"s3://npm-registry-packages"}},"0.1.9":{"name":"react-streaming","version":"0.1.9","license":"MIT","_id":"react-streaming@0.1.9","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"bf8019ec2584257dcf390ecb364c3b514cb96380","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.9.tgz","fileCount":59,"integrity":"sha512-Wz3f8eRz3mwsoE0eBDvk47r+WmtQ/YLKPmN3gJ1CxIRYUzLvdoN0fLxjsbVm1+AffWDYbl9MGadBT0ICEVhwAQ==","signatures":[{"sig":"MEUCIG6TksoC/FxFuoe4QaddLCHcKYD4xvCsVXAki5Qpb/YVAiEA0Mu7VsDkApsjrKUMvtsf2F0vXJVrSI+lrPRxbJfJcto=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":57530,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiasYFACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr+bA//Zt+LNB49qwfp0z3IKWBugPXQzxMerQAbCLyoEHx7Yw8yudAH\r\nVTHavoyYJCcH6wubvgdk1tnBYBAXyazAnyAs+QELs0TO6S0sJgMqwuQUVC6S\r\nY+zGtyISRi0yOscVftmeFziKyIvQmSUrOO8iW+euRucw91kG/6Zik+S/9AGP\r\nEjkdSYZJUIFjWiDeKcTDLBMkrXKMWuegk94bxCXFM2vF/qVD9JcHrUDeJG+R\r\n+4L5taafme2i+qOx/kI3EU3psPS8tkV2repDKwerYHRvbu9WutAu1mAgn6Zr\r\ng54YCgYTBctY6Pjlr+Ec7Ziy04RyAs+dU/9G9EOs67jT1EfUSY1RaAF0xdP1\r\neC3KGLp39wpDSOJSHBLMZ/9x5/zpiJKoL+cw7fZ28Nm/DFxAOSQCB4gsfOsV\r\n3Q1moNRRPsBHCQlzNmdcF45FrrQ8ZiIRGsBkrExtU/hYys/mN31jG5yrbhAb\r\njmXBQ2s0NwfcwrDdjahQbmSq955CxkVc4GyykSeOAMA3qChH/XgcOYX2qO0J\r\nMWRBBtwdTkrebpVE7H4vCsVad2AkkghkJ1JG6iQ+AGD/MEAcZHBVvvqLLb5R\r\nt09D19yPAuVIxP3bd6zeR6AKk/N/cJDsJxXk4V2SmfcV2Vz7XphPqixXRR5u\r\nG3+kaKnwtFs/3SCfU1v/Teoj6J7NGiqD3VE=\r\n=DNDl\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"b72c17f7df5f2b7afaec88debf2d34fa86779915","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.9_1651164677329_0.9485060016097273","host":"s3://npm-registry-packages"}},"0.1.10":{"name":"react-streaming","version":"0.1.10","license":"MIT","_id":"react-streaming@0.1.10","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"cf050274ed2e5c5a03eadb054f24ed4d26027628","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.1.10.tgz","fileCount":59,"integrity":"sha512-Ag58uTx+zlI9c0NWWQqa3uovtJ1Q0UJK0LZc+b1JWfQdKISgWDS1lr2ZzTWPMT4lG58if/N+KYIgjcDRfvjv3w==","signatures":[{"sig":"MEUCIQD9H1GzaRSKyO+DYGi0PTCuv8S9P8/jJeEzUdpRzQ1pUgIgeIHeoLdx54X/O6+VZf3T1Y+IzBNhfj70rqdPxKPB8WU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":58103,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiasu7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrKxw//RcsYf2d4YcFFRit/v/MRLYLKvI8RG4unI7/YjAaskp0r5sQ5\r\nEgQrpDo3qFzKxy+Q1vejIjA3UCdQfjHgFzU8g6J5AerWqIlLwoBPhN4le3G0\r\ncfJqn1LqfCznal2FZYmpy1pWP6hXdniZwl3XmXvN1aK32Cd0FaeOUmisTjwF\r\n2F2mqreeHhxVCthGaxpg6ZcYf0kA2rGx0ZNiOOHQ0H525dEKtO0HhHFwNTGd\r\nhjjC3iiKSyAH7x2DusPOarOT2uy4uQKQ3SobWXww22WYyuXSqR7bKEpXbo34\r\n1IkA+PHNndCHuYMudG6VS01FcVM62ZTGproeXNkPrXKBa6cXFc1yPFdVzf8M\r\n/Al2+9ZHZpZM2NMrtCpkimZBoXBtOxbQLFTfCr8MDECG+BwX4UQzKCZHM3Ky\r\nOrEQ0dDOdXWCogFuQgtLJe1g+3J4DqIaghpUMIhnQqUHBlvHYZRQAlvRz8w+\r\nDqPILqvSSoSaoIm9xwMeOsAq7K0pji7tBLosTREo2LkhEkEtZe2u9CVuvk4V\r\nwKEn32JHv2fEcZqTUwJn9WIgLAEZBU6HrEUvUOnuOWY2EdCb4MC7X5bUIWlz\r\nImyBmKaj/QYtaToSj8XoElbCkvGq9+kIyt2dgAgZE58+OKF7j6BlSAplJSWg\r\ns7v61/ROYbpU499tnd5VD9ES17NoUE4o0y4=\r\n=NiDO\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"802cc291c4b444b21542436d342bab02258f6d9a","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.1.10_1651166139005_0.04488160624786275","host":"s3://npm-registry-packages"}},"0.2.0":{"name":"react-streaming","version":"0.2.0","license":"MIT","_id":"react-streaming@0.2.0","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"3dadc56a230cfb68e1ef8d9522d7b445e9709ccd","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.0.tgz","fileCount":59,"integrity":"sha512-23HZykgEJonshfwVE4P7Ayeg0CMpSM2g6F4iE4bs/QVuPZR8xFIcuZ6Y5HdHZEt/hYc5vZcLfOxgjUKXmF+F9g==","signatures":[{"sig":"MEYCIQCxZlRLfQGkJdDS2bVZpZxFeiiOmqp7h4yhMXvGtaxOWgIhAMjqWtW7xfztkwtXBRvcvEpS4M/ST2u3RlmS22UAWXC2","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59362,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJib9J8ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo0Iw/9HDUc+0vN0slCZ+G3XqD3d4K2xoyz5Oky4KM1LrDYJensf5G3\r\nym3U4UpQZDCrLgeQvTkiLbdRAbO4tULrd2IdRbhq0h25WMcs4vC2xXOmNxtm\r\njo3s12ovtocdOH1mRmX70QK4nEBfSUjBjwPFeLWGbvzUWA8Hc6d6ph4xJdew\r\nhnnW9YhB785EJS9BX43vqGxV4WiI2nHWYLAen0i/Py+5LnVwaMPKcerGmwM/\r\ngApj1E3t7V+wCXUyMDeMhCLlSC8itog5diMPK2mxoMHS/+S0463Z5vT75L2r\r\nblES5l6G6uyGNT6Vz8WulzzxowLYeiChwWCXJh5/gntQ07UilK8Rfe/2Z3nZ\r\nYMXy6vbFHvxVKfzUSxYi8QrRQTrPqk+G2CrcDuNlcLlOC3n/wEF3V43cYbba\r\nlg5lCCa69hrGi16cTigdJJdYf2HmLy2qquniJJx26PW0hUj/pddVxHA6BDoL\r\nC54vvlr4SLlEsRRZSLKfWYW3jyYqZ4B9ktKIpnegw0gu7sMw4EdDcRVnLOpf\r\nsEyfiFAjDXnKXj9U4V1ov3xMGh4TU4Z+vlxoIpnodyBmvE3svGybZX4jqXFY\r\njXhaLwcA6n4+VgaL+EA7eYIGMU9B1HalXwjdSpJQ9ha2OqISPmG2hq0kMi8P\r\nLEAAvQafgHLEzvKirEDK3kYwEZkoh1MzA4k=\r\n=rYt5\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"287dc8241851f272ee49aa4320294e9025d3704a","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.0_1651495548216_0.41489819446159637","host":"s3://npm-registry-packages"}},"0.2.1":{"name":"react-streaming","version":"0.2.1","license":"MIT","_id":"react-streaming@0.2.1","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"ccb3073549f7a9f4082bd560d8f297ff6d5d27f5","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.1.tgz","fileCount":59,"integrity":"sha512-TIbDUWTWov2+5TPaxQCu5GfFLMpV3I5+GaQDFS6o7oNv2tBnKMHQOqFZNBiy0b3ZRfWGRgZUcWN9/rTT6Bzhnw==","signatures":[{"sig":"MEYCIQCr+4569FtfD7SWChSgBgtXUQld8Mb8MfUBZnRR4z6SdQIhAKbYOx3gqpXQVpMyt1soLO8PVhHS/PuvmL3X16KzeV4V","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59502,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJib9x4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmowMBAAlwcGw2MV4FyODNf1Mv3cHtbAej4FPxqiv7HBA38FH9NDJRQw\r\nYnOqDqSdGvOfBxKWxGtTL1KIw6/znTPgW9pAfry0I4NeP3NjTviRDjp6BMdc\r\nOo02uAYQ56oUId06s1BvHcmnjAsvsoS4jvntyZTgeSdP5bUKOsyxHv9JYd+z\r\ndk06w40cj+PYkNERCxrGd+VObGgxRuDvEsjJcgYlnspLiZuih0x1yCJkwQEF\r\nC44uT+d1QsdpDsG4WQDjpdRKe5gJSHEOBI/p8+QnyYw/LwJoSzVN7QYRUiQO\r\nFQDL3u6LeuGXWLaznSQsCpYUJR6mcaHeqV0jVjfMXIzKvFC2aSAf/M8+7yWg\r\nPZ3CKj3imgIky1rLSOCpA+imkR6KOMbmGqMgfmQzIoZ6FDxKE7jZH0rp2OJu\r\nOlBPyMv1ev3+VJXAWiz0Wg4+f5Mmht6uGFk+N4otWd2Ig3l12f6VleIpiaro\r\nuIZXD8gO4/a9pKXfrh7RBGd/LdNoshGKd5toqPvKl9DO5mhshf8bqicFLWt1\r\ne4SywoN9WIF70ilN+AIm9T++Z+/Bnd3IplrMSfKF1JROfYB4+jvtkbq515NA\r\nAlwuI/unhjwlompbKnvZJgHQrvEVJ9vfSYRGgIWCdR1b4I+6vJf95MUHFUvC\r\nrA/47Au3TDtHQwJqAOKv19g7IXwT6TLgyl0=\r\n=ZHUj\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js"}},"gitHead":"a4d9b1fcb2ec9a5ef417449b0bdfc517c08a3722","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.1_1651498104309_0.6178543205091338","host":"s3://npm-registry-packages"}},"0.2.2":{"name":"react-streaming","version":"0.2.2","license":"MIT","_id":"react-streaming@0.2.2","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"8cb3782b6a53f45c022c9d82988dd7499ccd790e","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.2.tgz","fileCount":59,"integrity":"sha512-Al5a/HWqpaUw+CbnTOOhoA5Ei6ph7TEoC0krakyuJjN8EwzgJr3wxlI75s3hQBhe0EgVtcGmUYbwxWlpwEP37Q==","signatures":[{"sig":"MEUCIGsc5JjWmiwVUHk10cGpyLMtBww5bxnHziyhHkLJ8nsCAiEAtGdcI3LjLsT8dzXOfoyraZi2RAblUBRaaX31fQtU5FM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":59581,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJicOaBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr6bg/+OKX5n6xbwf/6xD6a4bsa6lXhYv8JJkFLEIuhhqtPa+iqefy/\r\ntywHfbR33YGJn2e/0RqSn0jYz8+pOjBCxybnOv4NWukHvbabbgC/sdvMa4y+\r\nrz3nlVDY2yRts0oheCfG5abpZ5CxB/w5DpQgu/SuqY6scACIM97rdTUJ0LMK\r\n4Pl2pg2l1aXIQs2/a/u/YCA4doRpdEjJJvKLtGoNfyDt3I1zfZjpDb59q/P8\r\nDP3F26k0j3NSq9n5d6whsXwkhJEQ7LEWXLWhjc0jyCz2VEnXKot2vvUmlzCR\r\nEBU1sazz9jKUcLufApa6ji+q85jZtseoYTmvP7UZkQhaIyrIudWLqgMQzjWO\r\nuVPhMq1xKZ+xuYB/QWO3igfe0M7GKHS/DnzgPitwWlAlEKvHV6yJKa4Bz3Pk\r\nr2LP0P6fmq3lkU0hVTfE7hfeWIzu9tjRKx+DT1gG7J87LuJvST0rKYqlURTv\r\nA6pSyNDN57ymuXdL4OnMLEPgQolEIdV0Rf3yy9CmC3GVBBB+todOa1ETk/9b\r\n1dhPUqXvhU0DtvbUi/Yc1mThKnXW6purrl2pOb7l5HAnJG3re9jN09+TApRx\r\nzzGBO3j+58yzmf9+8RXAJtcIILiQhzBNmHCny44wEkNRH57W8ecfHLsuuKfZ\r\ne0DE/jzqS/ZI4+emIj0qnWs13bzOGjji4CE=\r\n=E6k7\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"94bee260038b2d30aad03a91164db7d5db47a3f0","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.2_1651566208839_0.050250604712828606","host":"s3://npm-registry-packages"}},"0.2.3":{"name":"react-streaming","version":"0.2.3","license":"MIT","_id":"react-streaming@0.2.3","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"191943c4e11b7a103d347b3f87720da8842604d4","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.3.tgz","fileCount":59,"integrity":"sha512-mfSwXfUYZxkyfxfhAdH5qgtBoKMjAy/Txu1VuB4Ttnq2vWAznos3OOvT2fN2m/QIBL332owxgzy32C4Jtq9GsQ==","signatures":[{"sig":"MEUCID2cpUfRqqxYDJY700ympYWc7x62U2/kXYQGeNUICxVwAiEA7LbnBsmhCXUwCu7mjWoEY8mcTUXNKhRXfqjOIX3JPUU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":66257,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJie+r4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpSUw//XbykOraqBcIeEHHrMj+gSH6LI2FDtZzwOCvF/pSNzQbTaUrU\r\niEwsFgt1spEuNtp8QpeS73QZNQDenCqESOOzjGAh0dsVP6BdZkquesBWj5Vs\r\nbxYQKgUe2/KjJKZkmP+CUogv56j+LJalj1gkwvDFz6UsVcAQqFVKiL00ezta\r\n6u7t8sUIN2lx+0RKYhmLcpAAQL2evtXRNY1cYvVap9TIQw1vDx1b9p/x3lrN\r\nJNExWFZMtvJZEN/YaHG1V6fWvJ7rpPWrWNJEhB/FJy2MvH2fj1zPW3qCAaMk\r\nvXxv/lijdPTb9wq+W1l68rCg+tG/rV8cDGVadUTXeo8/5KYKTus/UcXajJN3\r\nxY/DVxSJeUXbO+QAudYZrEeJ86RdJnz5QtNFUNfCNyrgNqgoKyEDaz00n0XG\r\nAI8Cm4uhddD8Lndhveml7vfcpALxqYanNZAHCc76rCOVbQQ0XANpMp341lsh\r\nrH6EUVF7lNegcSWZKdIjTui9aRXFpNsaL6JI8XxuYYUZRP9plbQMktvI/wS9\r\nYm/3wtc6Rvm3DNnrtrneNeh+Kc4FLTtgi97f8e6tU6vxRKgO0/xfYVnmecHW\r\nxrUY9SIC35nDtY6ConSb6DskUn7/GsFEkWLznpFcvzoZdy7S9X2l3xAEtfvL\r\nxX2aWLstY03MWMQJFvrNI6yUBH2V7J7htFw=\r\n=DzJc\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"2768eb795b415f784a5f0a7acf382630dcc1e879","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.3_1652288247805_0.760180721838025","host":"s3://npm-registry-packages"}},"0.2.4":{"name":"react-streaming","version":"0.2.4","license":"MIT","_id":"react-streaming@0.2.4","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"7483289037a4659d2c3424d4e5ca18f0e122794e","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.4.tgz","fileCount":59,"integrity":"sha512-/FCTkA7gXiS9c0vUk6TNVkADbjJqHCbEMNx6pEH06BcBCBKpknCsv3dbAPG7ajVGNdqbsz/35gRpOOsb+cffkQ==","signatures":[{"sig":"MEUCICZQnalKr8R9JP+K0SLU/sPp07WXRBL+E3odmeD+5JZFAiEA6+doAM9MuiQWnhARhbJ/HcpuAN8UV4m/UUnXguoQ8vs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":69700,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifQiyACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrrzg//eTkv4KHiPY5y+eC2Fy8vlCAWlH9St1KJPk59YIcMpbiM6W7v\r\nXeLKU741hVSO6M2lCGlxi5lGiSvK05c1b/53z1B4QSlvlw0jZHFSgHSBW/1l\r\nB0AdmB+SwJUDmTiDMBt8BW4YNLxVf3pdLLQnlfrVriobwJy84sar9K3Y8QCE\r\n5H8JASaMTrWtDu0BC2+MVigvQn2Cb/qUbC8/N/DvZyxX4wtblVP6a7rCcSJN\r\nHpohFVw/HAslLzj2S9biaaVAhtJgB6o8QO0asynodKejvhSt1Knzce9YRAQk\r\n+d4bmzQlNNdQoJttD7x1Zszx/3nQRrO5/9WEnEDstnzv3i43P6785FaTWDFy\r\nuTkjEPAWwLY/AkGHjz6nwVI2ZIMw9lkc0RCDBoMgk/5WRtJzpeVeM8Ch2qK4\r\nWSe0e9aJ/rdX1nUsdjCHKcG0bgfvGSwVQ2oY84yWRLUlcPJpnGOFzpNeErEr\r\nqtoA314iWO9DsqlHhAFN0AyXBhjNQUT4iBKz8Q4MIRBDGHlrXr0mzPk6msn9\r\n0Cp91I5LHgBbg9hL98qcZ62YQUgo6IPB8X4wESp3i/2T3KnSMWNPgCBb4r3T\r\nTl3eVzJLiqvQ2jMkEa6oiQA18lsdEEze+pL2VbkRmYfMxi31nsbgXxObt/44\r\nwPg3dff1+wSqBNRyB7m47E2auYASbNv2INA=\r\n=QaKE\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"7abca02b990c9994095ad847a134218fc5218214","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"debug":"4.3.4","react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.4_1652361394033_0.8186545750968393","host":"s3://npm-registry-packages"}},"0.2.5":{"name":"react-streaming","version":"0.2.5","license":"MIT","_id":"react-streaming@0.2.5","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f6ffc80e9d904d809c2ad0b13a86984836e85cb3","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.5.tgz","fileCount":59,"integrity":"sha512-u5A1ytP2hH4VGkVjwyZHYT7vtBwoxZ6htkDf6OIAd4JJEIgOPp7xdw6FWPjV7pY3v8fxEFsYGR2sNS826nX80g==","signatures":[{"sig":"MEUCIQCCR5vElgymXedaS6TATAVpHwQtVcQ+KSzsFv+JMrz02AIgLFFJ/zxLp71kw4J1MKv1gSi3G1tmY8/HNpFC77Z+2GQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":69700,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifQm4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpT3w//R8duZUCum1uoSzbe9mIf+iXefjxVvHX/eL10ZfrKaIgUWRZ4\r\nATOwSMpf4/FnD/NmMuQ5PeDjyF9c9DjhXtozPPkDh03kSqe681IZZmY8YG+e\r\n4a2xtI0DdVECmVdikrFFOfPhzp9UbYRvvPCXcLRcD14IFy+Ym6l3cza/gwpo\r\nPBdBxrObfO5yGrMAkYW+r8KJ6OkK6xnvD1HYzotGmiFYy3MTZs09f+xGi+gf\r\nv+GRdktj2wD7lGvKUjLewU/9jBvYYVKBL2QA6d5HPV0U0VDiJltCsSwpfHmq\r\n5NozriZgJptTS0Gzj5LO76sik6mcbSDMov6AJRhqjaWMBevsMcmwCphLa2jA\r\nr4zONXP0TcS/xrWjQkX8hrbOQ/C/VJ5Vp0sYLxaAOvwcEP1r3Gjcx9mYktUg\r\nBBMnNnlZXFfXZHF/a2Uo77KsmUwdxqGLiW0nVumrCEamQCXyfeys3qCuh+1r\r\nZoA1LCRZHvbOnGC2zE6MwNUbLuzJydl6JoCWR6SIzaEpRx0dflCBx/5+ORK2\r\n7OigEvG5QjCcvMRcs+ksyUI7SjOyXh8ioAJTcmjnvGMMd2jlP0iERkDvjai0\r\nRWP4O4hX0RxWu/BMx11dk4n5BYVP5v96B6IWojRza/fOmYJqDnQtjX8joho4\r\nPainy/F7PBGdAMR7SlO/pJxl8FfhHZzmgbk=\r\n=rX3D\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"8e587cafd6cce2f7421f1e73b399adb8eae7ab74","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.5_1652361656365_0.7752678172899528","host":"s3://npm-registry-packages"}},"0.2.6":{"name":"react-streaming","version":"0.2.6","license":"MIT","_id":"react-streaming@0.2.6","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"762f07a76b58ce8cf21276bddf795fb7be61fb8d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.6.tgz","fileCount":59,"integrity":"sha512-ZdzZMyCIuFA65kViYbfNfTDJKmYTkBKQ2SnP3QuMSTFEJZ/E9pvOedXrhYsNBNr/jejqiulUtzbwQ63ITxcoVQ==","signatures":[{"sig":"MEQCIAnAsyNjsnbxkLh4zDTr6zxvDSCaD9w/UqakqKK6evstAiAGs+q/WL26ruzM/fMXjfVcruDuIMHw8jLS88D3IA6z9A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":70293,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJifRjHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrOgQ//QYmbL/6Uy+PCnHqjyeux36i0oXPEa4OFYtT4RiyupyIeztqx\r\ndM98YEIX+uDwj9wh/YCQk71BUfz/zNfdya4G5oUAnUPMvP2txiZDv4yoNhcW\r\nxk/bWiIlqL7DZwfCdayLAuEa1N6k2namsqIbROrTBNaxd1BG3e8mdXMiu5Mo\r\nQSMVDSmR/VAiQApsxxsiL+qM7b1A2q6+gIpIrAuGcMXLFq7q0tQY4pV7c+Qo\r\nNYUhv7rQ8rG1j7j6jg/TDhd2crT4jXbOmkKcSCrTspKXzSPecOxAYPSb8ELU\r\noKlo23/sRMWP0OzKXCpnSOKsoEq/4x1+iJ1t5zP4ifCxeZY9xxUvqiF0zYIx\r\nVkGLJYeY6dZwBSVLkFsn7NBpcZirMUQsiuIaUg4h9W8JhKWrWg8ajhrkpBDD\r\nphNPNTZbF9vxC7fVFEYPTZ5BiB/5xJVigHCu3VSVUDiA9+Y/pA9fmamzJ74y\r\nxrJYKO0FWnD5NeIIOUO6BjdFCcbJfvahfwfFQaW52K7sjIZQcv9QDPGkeeOb\r\nIUYbP0wFTTD+7HgDndrdHcYUGIolI+gyvyRffykBJzV7I715+NOZI2t96kBd\r\ngL9flmKov2RWQhl18ML/Od7oEYiR+VqNU1PBjLxWAD/6zIpsCchnRcdzASoY\r\nLLZB6wmDq56spA004zCjJpBJBUvFI+4OdUA=\r\n=K2KB\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"34eb822b9702bd8a22a20baef44f24b3ff31828d","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.6_1652365510800_0.3270959756467955","host":"s3://npm-registry-packages"}},"0.2.7":{"name":"react-streaming","version":"0.2.7","license":"MIT","_id":"react-streaming@0.2.7","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"3e6a8d29bf557bec60a56f5a5b368c6e51f64ac3","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.7.tgz","fileCount":59,"integrity":"sha512-6WtaL/r3FfLtU6LPIwWGgWbEeicD06nY5jpFsDKV06GF0ZXP7xgy+qKx9Y6fk3kCNOq0rxqrltPiJrK/n/IKXg==","signatures":[{"sig":"MEUCIE//h8UEL6aU+/RJxryt6U1g8M+BLHw6jDX+lKv2wJI/AiEAkuZLs4hCTArGqTyq6s23snTFKbS/IO1/tdC5X+vCZZM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":70375,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJif5bmACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmq2rxAAmPNCphOjtqG1QpgGtbbvF5fSwgCKyxYz3ZC1+HtfMVlaHsM6\r\nuLJtaDFQjBqW84PbUIiHXiow4vRkE1XdfYY7SN3GfccxxR5PaJJizna0PWkX\r\naWR97EmleFyABM0NV1IGUAAXL50lI2x/39WduAexTOZefTRI5kQEepea8dmv\r\n7xMHEcNHy4byDrvccmr6YbNerR8bpCvk+tYUtl8D91Qkc+Rh/vqORm1Jxof2\r\n3JU7C2HNce5obgukC7h+d8KZSRO0UhY3Vlfwk93eFq4qg4TZoZJh9EcE4xRH\r\noza1zXxCFCjsUSDxYlgYfGPo90CZdPqNViGPeWJF5aUQekxlIARr/LQ4iI+v\r\n8IyNeZVRDlvYvETVaupaXb+mYu6QRmC7vGlXgrQapOfdS7YhWrOp2oXaPlDl\r\nuGwT9qV0WToayngdV7V4cxpEk++mfwYIlOh3tJrCKnCfeZ3erihEpG3E9y99\r\nrD0DB2N7lvWV0pQkTBaqM9zaR6Vrfcsm8RlttTnFJZcDnMUbAJWObL1FzNAO\r\nE+8mkA83LT+r3QJDd9XjPpWPp7KuqyxztVSPdy/2wE1WVb6Bm7Wz3vwsHupr\r\n4At7klDHqjEDkVcg8JvIOTwvXyGgrga8mY202f49u0lxRUlbp7K0zzQamZzb\r\nbezG0PDCCyRFpOhHpRtt3P96+EbOruhQyUQ=\r\n=9glq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","import":"./dist/esm/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"ab1ff67d4ef17e938ca7121430c91a5ba192c571","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.7_1652528870296_0.21514816763250288","host":"s3://npm-registry-packages"}},"0.2.8":{"name":"react-streaming","version":"0.2.8","license":"MIT","_id":"react-streaming@0.2.8","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"6d6c3c32446250505a1c7b8385f8bd3e10a50163","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.8.tgz","fileCount":59,"integrity":"sha512-EyWNMFKTjwc481LPavNHeyDRYuqY+8Fmgl9Stegz58Q0odAl8Y1WBaKMvBZdlXFvK+B8QvPaMe/0lXEKSTB+fA==","signatures":[{"sig":"MEYCIQDq0I6lycFG1i2zwrKaQLni896qSqISJb7J9hxe7Rlx6QIhAMeQAdrVSVEl1q5Zusk516KvHnfEQWkTkjOjbuU03Erj","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":71744,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJif7tBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmooUhAAg518Haa2s3hhPYnatYHMpP/LySL7FJJ3qjFeCvVt9NJSmjDJ\r\nxygt8s/VpWYIhbC2gP/vvXAg+GZeyTAvNg8zM9tqNHIeK8+K/KRx3To9eG68\r\neQH9NnSmwsHCH6zIdPDqkn+ArZDrm4snWWf3fGruK5TeShlHomliO+g4NAhV\r\nNRUo6RHxLrWT2s7Sr7+wAhAbok4mo2r336AJbd2ZuX8JQUFVY43SOeenzqD4\r\nb7tvtMOdfeUuzW6LBNxS4Jyviuu0AKxN2zLDkuJtuH4RAagsCmZBYX8FX8js\r\n//AhLKH7dAKodF/wH+XlL4+ibS/oQ97o4W2pUbXTBQdnPd8Iv2drUdzuM5Pv\r\ny/PESnacPZKcwZ4oGwUCodQl9LxKndex5484WneB46Nc52GN6tP5lZDolW3t\r\nvncTvG86k7q0j8N+KYrPwmL115EDYeIR8HOAoOwwHQ4SUT0LIp42SneOI2N6\r\nZUWG3GnDk59Wj7FGw6n49Ccd+O5++ZhLRlydrkJLOcf3lyLm3T6kheLROHEV\r\nng1Ftl5Iwr9Pr2Oan2efJbNFcaqP8cDSPXmF5b9kow1tZBbrqMOBsbQYfKXI\r\nA4U3yCeMJW5sODzoAsqIjgAmLAdt3/VxiPdWm0DZIF58eHFvp7AQcRLDtbTl\r\ncgEE1cKSCPBkhn0QTW6JI+NO6Rd2KZkugm4=\r\n=uHdG\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","import":"./dist/esm/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"7a09b5af25539f6694b46f9283daa7063b87586a","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.8_1652538177377_0.54518056465012","host":"s3://npm-registry-packages"}},"0.2.9":{"name":"react-streaming","version":"0.2.9","license":"MIT","_id":"react-streaming@0.2.9","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c7acca20c764caffc785593eb3be7bb50cd7247c","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.9.tgz","fileCount":59,"integrity":"sha512-oBRQYqHYiOBTeSaa1lMRQtdtlwaqh/l3y69SaaPVRSGpKabIaJZ5rAJJN8HucwiG93dNqi2MdTJJPeIK01ki1w==","signatures":[{"sig":"MEUCIQCdpebUpVqwQlTaRYn85yf5juBbQBbXhAWiWXyNMwIaMwIgGYNs2HKovyMhjNY2eA9DFI6U1fJOnFOaz0bjexTfynw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72028,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihq9tACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoCHw/+KZNWzzgTAflZVduwplFcQUd/dKkWniqALkr0unP1jsBnr9P1\r\n2VO9ct1B4N5SQAIBwuwxGGgYDVL/hHg4kQnujPtQTBEp4wjEjzHJT5doLKjo\r\nDsltcHcvVxPNmh6gCneHCjmUzFumobrGW0Txm0gILycu9iwWcHziJ6FP5X/6\r\nO4OuISnL2aftvbm3I1Nt2jmHvI5EIe2Z47XRclqF14Zu3/04yicbiWuHzw7D\r\nQ5SNo1MLjJlamB2bB4ZUyaOHPekNm021nHhndhHZRKXC7Lh5iI+V+1a9CnJD\r\nE1b5v0SQ8GmUUB9i++AM709/gLTu9fIDMBOpbYYMRAJi/eCQwxNEihKPgp95\r\nAsT0biBUVUmRzhY8/orrdocY7m8CGrNZpJiU7x2o02aLuuLXtV4QpBrxkNZA\r\nEpNe796A6jW7gxWshbRHWJi+EssX1HwK8j09B9J2hj3ConQjY8Nt16Wuh13b\r\nxKDujET0na+HkgsH0J2DXFDFv3jz/eryodg34eJ91O2o+MgfBMgefQYc4A3X\r\nprZE+UsvrgmUS5Ou4rirt7KWZOdxh+u2VBfVB9eo8WH1lMkPsUtHTxsnKPip\r\n91cfRACavJUkIFhUVvDre9ItyDXXGH7v0WzS6qMHclM+tidgbYzHUVU/y3V6\r\nXuQ/zNb7fUwuaUUnb058PNRLiBzanDWN1Dc=\r\n=iR3Y\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","import":"./dist/esm/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"73fad433137d72abdb869a40e71c10aeaf7094a6","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.9_1652993901155_0.9887318499410813","host":"s3://npm-registry-packages"}},"0.2.10":{"name":"react-streaming","version":"0.2.10","license":"MIT","_id":"react-streaming@0.2.10","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0a4425e9452ca94e1a8a3388f07bddbd286d1dde","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.10.tgz","fileCount":59,"integrity":"sha512-EM2Rvy8SeU12vykDwFf11wCMpeOsATyKweIF9GfE7Sn9gqtb8Qe5RJ5UbJm49vAX9N7frP/XutP1gAbFwqTCPA==","signatures":[{"sig":"MEQCIAZBv45s8Eg8OkI6IhipvyKwqXtkdSJU0eRM3wOpxSMOAiAiaiqe3rr4f9jOhVbUKIBjhDaLxcKrVW71JmI/brRKJA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72035,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJihrpWACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqMUQ//aRWinZGnFf5nxyDl73MGs7+yNEPSi8vcnxXgv4Dw1o9066Y9\r\n9KzWeWHmEwOmxxTdvRs8lzbFJIjh6a6uuCSCFgRiXwIDNYEwGBrmDAkLpdOc\r\nJmCvWB+WaH47l/7hFwYuJtpwuLUHJbF3SX8VQwsvOYGnPFdHdL7nETavgfnJ\r\nJXSRFtBASUwjealdf+SVvaalFlfmINXRzpH3ObA0ahfXimJvD85fbdxJnJ4N\r\n8JYpcZOutRx1BRGNenQEXVEDKGPxFq7IXZbDUh4qNcJw+oN5qYlRK65rQpm9\r\nBLKIMjpRpjP0HDCzeZcSUJ9WiSyDuhDtN0Sp7E33cwVabDdqvrEb/osyskmT\r\nrvxc8MbtlGhK4EdpRTRavJWAwOpQvoi9rmhSfdgeAADNlJWSDqH6BPOCA9VJ\r\n/3ZMgk3Sf+StqAa2bbuYnirseLS5MxQXh0ET03+Dl2y7VujqapfWFHSyTBLi\r\n7RUle2H4lyH18B2PEB/RUqlVOH7rqsB/GXY2ooLtf/+St6eOuf4ofJi2hlOa\r\n5DWLnDjNF3ucVZZkZUourjXsFxqw1xGe/OU2nBPru+Tytpwq4wD3NmsrGEh2\r\ngMHpNDWa9tgrOlqbU+RvasmDXabUI6P+8uUP+Ev3JDRejLtCXDiYVPfHtk6P\r\n8LggrBbVhMiUYudu/w8als7tkzqYTZlOLAM=\r\n=v7v/\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js","require":"./dist/cjs/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"import":"./dist/esm/server.js","worker":"./dist/cjs/server.js","require":"./dist/cjs/server.js"}},"gitHead":"abab731de9c9747c72e17cd15c8858f186795ab3","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.10_1652996694241_0.9925204040620457","host":"s3://npm-registry-packages"}},"0.2.11":{"name":"react-streaming","version":"0.2.11","license":"MIT","_id":"react-streaming@0.2.11","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"65650f92b68a8ec62460378fbacecc62b792d8ce","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.11.tgz","fileCount":59,"integrity":"sha512-GM4fyr4JXU4l4LyqX22jzb+3EWGArzp/Stzs/TjOEr3c5nESuxXzMGUfAMwWDBfKKjSPWcHu42yVM7YwTWomBw==","signatures":[{"sig":"MEQCIEfFOx+salknZfuvHKRKZl1s6k8c/iPZrilhjeB9i32FAiAEUVBaY0kL3GjZJQ64c4gNSdMpEEC2hdqPv9aQbhU9Bg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":74290,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih32FACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrBXw//TCo0YDliFH8E7wMvNTm2ZR7aC3W4ZRloxvshxDV/rHeyh3Gt\r\nFIaaAWNbCQpyuIqfi/theqR/eFte+1gXEqX/A/u9WUIA9dY6imNCfm5A7Amb\r\niQlKf2Dguo26fc8oidKFSbNAyvxtN+j9HKlS2RINr0aLeHj4xzIQJQwuHkNA\r\nJREV/Rj4P71qUPNI+F4Dwlkv1z+CM6lvnIdZxNBM+mUTFUcE7qTu1N4mZJ+j\r\nyDmG2UDK11K5qLxdtFkJewyKlrXNuoK002XB9m9rc1qAdvoD5JD56pyCWVuO\r\n3jgJ7vyxSU+WTSFYG8zPQmz8pFVU6tfQtRhTgW5OgosWBPLutm87BRcd1gLd\r\nlaVFTPAhx8gEJl0NjJBLdTdkDR13MvTRra4FxnaRWZ2GAZLU50/P5xK6BtNE\r\nDmmchNSELSG7OtSBFgrz3pRLonajcMW0uL9YDjxKwNYd3imNVnkdgWFS5bjM\r\nZu+d6yLl4fveG492yjp7X05zazZ7BAVIH3oYgDg4uHinGihhaVWNf70xaCxK\r\nNCMFvPvaEPyV9Xx/3ArDxhe8I2uyc16hE/QfAynAcdW5YsM33cowYYF9z0v4\r\nB+WT/WttopHQNJObdq34MKDlg23q2tRFLsXhM5Yo4iZ+BdbZVTABICkxGIap\r\nVWcFLBEpHAIBTLUXeBAwsVm78SQv4zFIoGg=\r\n=Lef0\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js","require":"./dist/cjs/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"import":"./dist/esm/server.js","worker":"./dist/cjs/server.js","require":"./dist/cjs/server.js"}},"gitHead":"62f0fb17e034ef5c90e4704abedba195ea05d389","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// prepublishOnly":"pnpm run build","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.11_1653046661549_0.14368086079912423","host":"s3://npm-registry-packages"}},"0.2.12":{"name":"react-streaming","version":"0.2.12","license":"MIT","_id":"react-streaming@0.2.12","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"6433fd60e241f665ee095c306526b4fa8da838d1","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.12.tgz","fileCount":59,"integrity":"sha512-DJZjKF2meIxioSFKUlX5e0gbHjoJzXQB6a+Tnq4wjWmGdsNISb5dgPQzTDxffq43f/VHAZPRhLj5+npGG2QYgg==","signatures":[{"sig":"MEYCIQDvxkbLGS94A8kQlBjJ+OQU4k89rd8JPhO+FqWvldTlIQIhAMsTwyadwmVBejNFXDwfXMWMeigsN2FAQo9RaXtdWH2J","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":71100,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih6sAACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmok5g/+L/9yd9UyouJAo9n/AFrjZKfwFSR9t+4RfdfBM7JFzUakX+h9\r\nMnDQ8WONe1DfN+/KLhjOsnZeD71Z+uyWbNfcW7wFjCzpNjWc5Ukm2nZvQR/y\r\niCgpE0MRflDDV/y6sgj6y1f0mtwT7Sn3ovyUbQMjZ/3aLAoIiCH+8xn0yUPL\r\ny4c/KZJENFdIsTRHAY/R6tzGaZff1Av9STH36pYaV7+bRt0mleopzbu5MGQz\r\nGMwDZWeEQ5LbhtL9rahFVVVCCzifJrMiv3SHDQw6gBMLgDMHXbtbHKSlhau7\r\nhrj49VNIggL5wRLEKjCi5+g7+60Li+9el1dOqSwi+Wgso+KDudiFcgiN2K7l\r\nG0dMoTcY+UfLVGFkK496VyU0gs+PScCU/6t7d3ID+0ZNmIqioy3UxnVcDNBq\r\nGZw+BwCUMxvbMEQmvcNGrpZjm0A+Jx6rNrywjNkVjIFhyBOxmYzY/I0mUMRk\r\nZ918pFvOWALp7SjrY8XPl2lHxPTBmF0uXOCEgRpjZ9I9jkuctGi5H/O6unYO\r\nvsbNiii1/s7wF7A12z0EZ8r/0avs2oHM1qBO4ZiW/KNPzf0WRW6NQoSOPF32\r\nsU2PyN9loz/w/Zb73L3mipq1lPmKA9gB/n5aVCH//mlVozKjc9t2IoC/qFmE\r\n+xj0ISIIKEtn+TgnsjWaGwoATNi7Ow0Lz/0=\r\n=TzM2\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js","require":"./dist/cjs/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"import":"./dist/esm/server.js","worker":"./dist/cjs/server.js","require":"./dist/cjs/server.js"}},"gitHead":"351b9e709d34a872774f6d783922cdb7d9ec519a","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5","@brillout/load-module":"^0.1.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"^4.6.3","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.5","@types/react-dom":"^18.0.1"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.12_1653058304481_0.5900256326702722","host":"s3://npm-registry-packages"}},"0.2.13":{"name":"react-streaming","version":"0.2.13","license":"MIT","_id":"react-streaming@0.2.13","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0b43a1251637a6077a4f95e77fcc975668e0bdb2","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.13.tgz","fileCount":59,"integrity":"sha512-Algjb3Fk3iynl6kY8YuvDEWBjFgDDIpnxJonB3MCVohDGf86YKHPWaxRg6jBQIXpV0lhB3gRW/+sxDnLsqYQ2w==","signatures":[{"sig":"MEUCICYYsGr4/CQHyQQTxXj8lyCr7KrCE2kjm3W53RuKpjBtAiEA9CPZwID2PTZsOb5Etx1AMTpgiLqRzc4+5RsNScc7QEM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":70849,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJih7JTACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmpipw/9EhNle4EASdpoj710HIECYlkM/UoaZFh6xh0iuoEDBlbHbOx/\r\nmTH6ezb46esAlwfDABvY0bYtOl9Xvf6Eqy0I3iSM1XdK0+BbWFG/4ju73pzz\r\n6z3hz8GFh603AjEuN3RN5DGQQLvEOe2rSECPwotXBOQGGvPl+cshiF6XNYUd\r\nlAp+X2LwynIUFZiPUWR0ikhh9yXhNa1Ho5hHv4oc8BKlGdIMBHDHjdjcp8Ym\r\nbzSVZhZbY5x+CjJstqS/CvKa1T+D9rAu1NwJOmVq2EzEZxFuzMr3LL1kXz/n\r\nziuyPgfBeN0hFXmUdxt7G3+CnwiSBOJDdAq30TXPrPGo07L8ekrr2O9MvBTf\r\n+0XIBjxAZtWVCAtPdhOOVHXwk7yi65cKJjs3WXnkbVeLO2RcU7uqgsr9gf2V\r\ndKPwRpGedcUYuWGyTHre692gt/kCecEsarGJwc95PZ3DNOSNRi24g5fI7Klx\r\n4ww2Vwzx/DXWQyNy8O6m9Jpt1nrlNNaemGsj1t+NzSEeMxAIbofNpGHJbe9f\r\nxMWr4ni824BQ/70VhLdtHUL4XkPmV7Zi3Oz5BTQg17iLQg57a6QIX5kQgX0j\r\neYIJ10e22tsYidxaedswMn8UW+j549PeGONiRRE9Hq9fa6FLF622+epb8TpB\r\nC8NdKz/kL6X8aLdYm6rOdmY2QckJ2Lno0V4=\r\n=PwqN\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js","require":"./dist/cjs/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"import":"./dist/esm/server.js","worker":"./dist/cjs/server.js","require":"./dist/cjs/server.js"}},"gitHead":"32937062e80dc9275d7163832875d40434af07d8","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.13_1653060179529_0.40634869912475424","host":"s3://npm-registry-packages"}},"0.2.14":{"name":"react-streaming","version":"0.2.14","license":"MIT","_id":"react-streaming@0.2.14","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"e588f777699335809b2d595c7199cad0e608038c","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.14.tgz","fileCount":59,"integrity":"sha512-r3DgQnaCe35DwkmxQC0B4xudLCiRYj8sRtqrPugbD1RcKP4i+0GenpUG+ZJCXClXgtsAHL6YTc14bj7JGHyP6g==","signatures":[{"sig":"MEQCIB1Ws0ux0ee1+GgEXXrKMPsW0wKBBxjbgksSd0O9QSNOAiBwGhBSIGBC8GnWdzETlXpp6yg9H2IkNES1YLY1dxA3Gw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72114,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiu0svACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpnGg/+POgtMJ0PRRpoEakzGI+Qvsw6EfVR6HWIftH/k7evbBCBGspP\r\nFGIHDmtblSkKRV3SHwTrNS3bNdLslKzfjlF66bcWMd6uokuA4dvWTt5HqLgx\r\nbMWU8cIWkqIlX0YaWanIM4aU0oYrfNgpQG3GvFm5uSENYTqUEFuIPo4eM46m\r\n/dx+XrykVYzP5tBW4T1TVxtof1Q2TjKAHgFp6l8pnLqG8P9eE8nMylgYZuUZ\r\nVjqXR6cDuSJUd8N8TylnfCNwbGyXTpOQmuywUTbzVIYVwvwpzxR280YXHA/E\r\nACAydA5+MsTtMK6aM7yep+UxNQ/3VWLRqtEQ4HKJPo41dhPdZIDWMawxv60G\r\nb7XAoFOVFTuB44nGVfadNRzTg6wAJOx6tNMNmhwoj3v5tk21SI95QQEyOrmC\r\ntZNvM2y6CB2yX/Z7Y6LY7rcPEQHxYLgU4XnbXghKy+hE9JdMYJvl5w+Qh2q5\r\nFlUpS87lscG9xbzWBWrAduREnomdZ6ykiLNd+TYKtJ8mCY88zWHCcAC0Srrv\r\noCEmQVfDY2xRPSZz3D9WIayIpzF/nLQ4lo/V+MbhvGno5yc2HlrC0Mhw4ZQO\r\n0ki7UHNOwcIYAyVfaKcZFsnn5x5HlCqBtQr93uLoy+eCjD65PrAh+YleBTMX\r\nwCoXkf0KmRC37ThsTyULhmzALDACzjM4JRk=\r\n=K77Y\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"import":"./dist/esm/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js","require":"./dist/cjs/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"import":"./dist/esm/server.js","worker":"./dist/cjs/server.js","require":"./dist/cjs/server.js"}},"gitHead":"a2478fb60fae69014e03197563ec45544658c652","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.14_1656441647763_0.48507188071119023","host":"s3://npm-registry-packages"}},"0.2.15":{"name":"react-streaming","version":"0.2.15","license":"MIT","_id":"react-streaming@0.2.15","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"458378c43e3f46e2f5efb6ab6fed096edd991b1d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.15.tgz","fileCount":59,"integrity":"sha512-8WyZeKDB7payAXb3iQxyEPSZxAbV2kPd1J5gixLbsKcDUh0Cxw2SjPWTUwwu1RZiyA1itc3gAJDzGjTRCSMD6w==","signatures":[{"sig":"MEQCIG7CoQGlCyEBUYASgUCBJfRCtTU4e2VpqMJ7tYIxZkVfAiBAjDwE3oJAg6oA0AJBd7WQuBiX0nbTjfraTRz1A8LzYQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72029,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJivCeCACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmobxw/+ND9kuMkEmWJVjajxCt4NiMf+wGn34mJTJ3Z4TfBhZew9PI+3\r\nJJwRjjhtDbgC/sMEcKxJoIXu7BHVGqRYvfmJ0/mLtEQ3VeavZEK+wajtw9Ri\r\nYKmysZ1PsP9Fmrrbx2KZibPMLDI2RkQWeDqhSqU7CEMVYkj0oP5sJzifgM4V\r\n9gKcCBDysnmmZS7hc+WypY8ykblbdXe2e7/r1KgvM9k7yB4dcn7acxD0yOFQ\r\nxMYUatEr7aXclbtKuoplr6ET6BzNOmLiDy5L1YCywVU8ro/Czthf/vff+slI\r\nkq6viLRhz6fIWHPw95jmiVLj2xBedmOAaMcAYODUXdm1kAf0Q8m7rhWXsrjI\r\nFnDONRUHYHNRQ3jEjEmcnR4xvHvgI5uzqbnpT+ekWPCLeYVWdU+SJXoSQA72\r\n07ZNC2NqAD2+G1S9CFQKe5l/4KwsrMHcd7QVnNhfIkM4zx6M61FdxTqf4wRr\r\nixjE8jmIpkaNTfj2CHftlWCJuoUrufpn5uLzF+RDXMdQgT/a5qaPcoeJiOAo\r\n2WXVjWkf/34SSqgGkJLzaCmpdy3MpppU+BGzZ4FgHiZ64ZSJ+aw9sXAfClNa\r\n+Mii8Of1mBQHW0cXxt6/uAYNUY8SsYl10qWRMb/rN350OOy7vHz3nWxT7RHs\r\ntaSkkcqrfX1i5isJNq3WLFO1PpQokiCjWe8=\r\n=Xyav\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"044ec0690b44bf029fd9dc2e9f36f098a0c22b60","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.15_1656498050314_0.8745349583013531","host":"s3://npm-registry-packages"}},"0.2.16":{"name":"react-streaming","version":"0.2.16","license":"MIT","_id":"react-streaming@0.2.16","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"89da4a4ccd03024c22b61ab73897749b42a34be1","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.16.tgz","fileCount":59,"integrity":"sha512-8+3ew8qd9G57KkQK3119YdToGmOWFu0aw8+JJQjTZ96ryotF0f4bnwO3biePXliXxF09QvazX9m6La4J/sFDMQ==","signatures":[{"sig":"MEQCIH7WWmCNaE0uWOQwQ38QgVPvMVWIa3Az7NInaC6QIbG5AiB2SB72GF85QCa/WZkBNgTDSBgdOx9Opy5+1FIgb5o2cQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72285,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi2b7SACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr7bA/9F+Ogn+9pn4Jt9ZhNPE/1J00O35r5hlEUbOgA4GKwMLK+4R5x\r\nbmOC/13p7GPCXD44si+q76GYbgmpLNM7gJ4PSOl+nAQZYb9jwgnOIdpoqoMs\r\nfecKOjiAzh0mDlB1mUnn2wwsXhAX8uOPXJA8Xt1RNdXswfFlex9ZcVCvCCB4\r\nAi8CHDELq0tRnbUZ22+DeTaux5Ac9BsDgHZPVDaR33vVBpaIp49+zIVEfNxr\r\ndI/X/vYdV9YQ/bYFLxo9QnMtxUf83HZlazCenC2HW8r/houc55HiYv3NVt8M\r\nzGYkipXEnUQ49umD/iu6Qb91giohfx3208DqxcmzfFUrNby+ok66UOUhTI50\r\n3J+5ZmUohgtI0ynUJcBJBCf1QwoputcuCwWhLZXZ54hAPgfyIUeNvhNLDm8Q\r\nPiENouEEuF8iGPUZqhIl1BcHLXTeubymJUSXOK+pqmSsWzQmLJ3btWDuMgTo\r\nFpWLAU5UDAH3i9GgJyYjFYSeeoqfVjyzTyMsd2WTx30zXdvjr+T0VGo4JTLa\r\n3+6lN1ihjtBWC9z0W4eIy1JEoUqHsbFyld1uvT2ojz7HqMsNQB7pS6mBiV5L\r\n6CFfDeEe+MHMLRtHqPFiD7UbhkFhoPNdqAbp4Mw1bL1vgC2fq3Bdrr2izjM5\r\nzq+KLjrmpLRxCYhwTlBD3eMhriu/2BJweS0=\r\n=RzCC\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"0beacccc26e2ad6b87d219b00ae1953f400bd487","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","postpublish":"PACKAGE_VERSION=$(cat package.json | grep \\\"version\\\" | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]') && git tag v$PACKAGE_VERSION && git push --tags","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === https://deno.land/x, see #12 ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.16_1658437330248_0.057118320610396234","host":"s3://npm-registry-packages"}},"0.2.17":{"name":"react-streaming","version":"0.2.17","license":"MIT","_id":"react-streaming@0.2.17","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"78e51472a959c03287a6d6aca303690728d7e982","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.17.tgz","fileCount":59,"integrity":"sha512-bFSxCicq8u66eFMXNT3vO6oC/0xAcekjqTdK6tz/2rnP9b1x4FXsoMgQCr2CbGIv4PN7DvYCNWVtxV4QVnNyDA==","signatures":[{"sig":"MEQCIGHDTfMDCCiAxTYpDxSyI3p9xFOXXjoSOJUFgwj7zj5DAiA0J5H0PVW0rDwkj9bv0aJjopEkI9LQNc2H1i97laAScw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":72161,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi2lYKACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqRew//Y4nFqXCsKsDXoO3OiIWkIAYaG3jODOtlf6i2n721RBKdHZAl\r\n8W8ZU681Ify8k3DYCrdNRSrnp1b086p98NxJwOSD1zNScSDdvi34aUyelRq/\r\ngHohapx+7bmC0ahvbrwZbbPF1qYtqLdEKNw+Fygm1NqnWbVgfacoWx521aB8\r\n3BYWMwkn0GvPZJ/rPli9HoOlgr6sPZT3Jo/BZ2QSIbiANew30TbA9jwZyXkJ\r\nUCkW0su5wFinMWQyL2WJNgSCSfbOpSUBngg6pybg5xl9BLTpg3F0zUBL0+Z5\r\nEDPMguBlcBnJg6q7E9TXlWIdpBc62kuilxENCClOqs+LcY61hXUQmBH4gLjK\r\n2gq8toL5Ut4HtkqLk3flNRzTPHmx3LSS/qGJwO6Wt4natMxqoipSkCrWW+Qz\r\ntPa1hakqXyoiDzsP1WcPUKQxztKhzwh2b7f09dQygBOT5gDZh3S4Dx/npmam\r\nKAwpSDyH9tcYMmoZQdfsgkJepPNXBDJEHMBxDNacgQ16asbgKcjCfBMVBVQy\r\nK1jZi1cAKnYKkEuh3zcRnnubwaeX6M9Jrqmgro2tGa7K+fGuIRoK/BhJxVwh\r\nqGYkjlcI8DzTZ+0t4wTvAlGGAuTNf/US81ZSW3mUvSSxizfnpfiHj1n1vg9m\r\nX1UJv4ihjqHshBJH+3y/KEdc4DbqkEviZ0Y=\r\n=D/Fq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"1b2d18cdc538b2c26f7018bb2cff7f0dcfff203a","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","postpublish":" git push && git push --tags","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"debug":"4.3.4","isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.17_1658476041998_0.2818615756502809","host":"s3://npm-registry-packages"}},"0.2.18":{"name":"react-streaming","version":"0.2.18","license":"MIT","_id":"react-streaming@0.2.18","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"d77ab71dbbc7f2adefd1d53aab2c42bd43c0f175","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.18.tgz","fileCount":59,"integrity":"sha512-iPFl1J/zPay9WoX881fJSqphJvhhqYZm7NvLpwXu9W7o/F9sDDNkUn1PmFRnBlKeTHOSOheCraZvNXVF6xy6iA==","signatures":[{"sig":"MEYCIQC0vhGcrv84cxcat75g6Qt1pfM27vHFNRb/Xf54rGLwzAIhAN8LpUh+LDX/7QkzcsdKc9pscsU3dHLej1PzcLy+9HBO","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":69887,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi4C9XACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoHow//Z4DYXTTQDf37dBnskmXp70dyD/SBpws6D05+wAa/NuemjUkj\r\n4+3OYziJJt59jqDbBr8CJBY//WNkgl94iV5usK0qKbaHUx3T9K7GHmT2QgqO\r\n3ZQhi3RYJybwHinjRugrhxqrfeE1D5bCd6cEXCHynFeF8MVjaD2+LmjRB4uI\r\ntMfxwJurVgcP1EyqdxCpt8WSHm0ANN5LowSaB+yEECpXFNqym74MZvR1KbqV\r\n9afztye2kXJmSu2VwaP/Y88sdtv5d/1FuPi1qUeLaB4Wb0SWbjNsnL8SREaL\r\nLSsbUidBThAXcPx6e40YJHu7NyXfzkmpo24a3njfYLl2RJ8jEGYe6C2Pdr5K\r\n7rhVYhqbAMaFY4BmKihlJXdQW8ZnleTiKylH9Y2U+njj/fe1sVQ6rXPSfHOj\r\n4oQ994/VBKi6f2OgTDP/gtc7SLyJuTqvr5g6JCC++Q2s+YtaSyz2bQWSYmpP\r\nQZf5FyqqD/8VR6prfbOS970nWfLGE2cJJxo1MAZNhyESDuyXffiUu6XDYO6E\r\nJVmRMkh+rZlmNFqts8P0FIVdiBKXZao0pALexC+uiiMXBOFoF7DQ/Awmh0In\r\nDmDtoPdd+kfJvEDoPNYBv14acMcfM1wG0DWTYmCIH8YkfYF6/E+9OQe2XXbx\r\nGfUIKurQWf1aZ2Dk88AydM/KNYA68hKi9HU=\r\n=48VH\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"deno":"./dist/esm/index.js","node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"deno":"./dist/esm/server.js","node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"24a51bb4558df06232852144e7e314ac7cb3a61f","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","postpublish":" git push && git push --tags","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/debug":"^0.1.1","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.18_1658859351414_0.9338257869606701","host":"s3://npm-registry-packages"}},"0.2.19":{"name":"react-streaming","version":"0.2.19","license":"MIT","_id":"react-streaming@0.2.19","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"e6a630827d8d9e0a274f341ca60a16bdc2450811","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.19.tgz","fileCount":75,"integrity":"sha512-iDvb9FFJB5zJcNkGb2yzZPG5ayOLaN0XYhqVmLy7Qqn8Asq9OqtMxa3oclpIGTZEibDkjLU1eEMC6WWsccDopw==","signatures":[{"sig":"MEUCIQCbVgWJt77jbrZ4vP9hgZ5MUGMDQ+PrA/Qcg1Tc3Az2igIgSKg8CjIXQq1ChCUDAlsqfrQrd3YFlmlybd68+Nal1xM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":73372,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi5kC4ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqOdQ//Vn5YJCnp6wDwHa4KC3ClJZIzydqlXpcwNS8iOGsdoJNSQKow\r\nlK/TKblRgcw2XAjANnOgjyNGh+ZsXrn9BQkqZu9izH4KmmFe6A7HDwrmZuFp\r\nbzPhvzEBTsSviYOgWmempLCplyWAVsE/Uge3gts6yjKbORWZe0PYGoKnaWCT\r\n0NfU1ZmI2TjDaxk0sdt/F+ArIu5fnMd3oIwXfoWHUoEBYi38dr05kEZU4Ew4\r\nQ+IdrU8ZBj75l32SRAgkFE4C85CqYcwmJxjPUIeIltXsarM0YenbFx2pTmVi\r\nJp+RSGsasre40uHh6UU/mXwlijnRR+Tmw+GKbvlVAK34L+Kz6ys94k5Qb7+n\r\nkhNt8emmERs2uQHk+GRSW1unoCUVzPuRIB4ftalPsQCpzs0uipkly5IVUJSN\r\n7MlYOUXpnC8kWLKrEKk8bCDgecSNJ8fS1ALZSU0u+2nAh5I/rsq74QaB3cFa\r\nPY5cB7LwomR0ANg2/O5Xdy0Kud/g7vkjp0rIjvcYPB3JDpu8Usz976eaPF9O\r\nWCsrrHZi5dm+iTwmrqTpENdTRgpdNNJzL+Ca4ygjx9N6CWNOEljxxCqRWXnn\r\nic7aJr9LnD5BtgGlRRKg5dGevFAmwlUvXBaeYJafnyv2SwdfjvqxB8UhvrcB\r\noXwsS7rvlSV7cFSQ9krvmC0cb7MFbov2tcM=\r\n=1Tp1\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"deno":"./dist/esm/index.js","node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"deno":"./dist/esm/server.js","node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"9045bd91f704637045be8a0796105570e1ef9e82","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","postpublish":" git push && git push --tags","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/debug":"^0.1.1","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.19_1659257016480_0.7308652800018303","host":"s3://npm-registry-packages"}},"0.2.20":{"name":"react-streaming","version":"0.2.20","license":"MIT","_id":"react-streaming@0.2.20","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c70a4eaea53c672e5b3000644d2433814e198b22","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.20.tgz","fileCount":75,"integrity":"sha512-/GVoS2qUG6uQaONdfsTM96B0JDEOCh+j64IYzczZpfIhWPg/u94af8B9Ngp2Pg7E51xRJvPfL6L6Erzx3oO0LA==","signatures":[{"sig":"MEQCIGCe51/RewaRVqtUYDEWZIa7dJ0a/uZ496FR60HJjlgTAiBtdWuhO5rwHxilGk5HLYYipKcwCQTtxM5CCknF3FokeA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":73672,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi9mQHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqq7w/+LaURznjhlK24PoGIwZuX2AxIaMNDYCOHr3qv2wyv6nrMQh5R\r\nYQBxaOHo8lAJkIBMFmoFRXVuppgkUIw3Pfa4lYkeoYUNAdH0Pv0aiP+1lqG2\r\nomOAolSNiSs3nrT5GbjzCniuYtADsFisTJYgDKBFeUhvqoO7pujaH/Y33nF4\r\nrau5bSNnhgH5lxX6KjtIy1zMPKVaaoJSp57l8Y42Qzx/LvA0F1tW2f/z9ZbR\r\nwtzRvntmOygfqI5Jf5rypGkIFYQ5ZydDZsEX5BtuvG6+bfd2qggFEC0A/0Hw\r\nEUPaoF1ylTZQ6LEYwtiaL2WloKMXBWMKU693V54UVJPGvFDV0f9MT6wpdaSr\r\nOqrNoo7fb4O4DlAcHGvsxQG9NwjTqKReixM8fvy//CUQfVaqufr6R4kKI1rs\r\nGSkWheZu62R61bLw2tSX1kIZGsIFGjQ9Z0u5Jx1ErFM+zkKHQI64WoZz72aF\r\nOWb5aR85FVJYGAEZSFk7rLRXkF66eyxd4U9PkYOtDI04hmFEij5WaFYa18TP\r\nf9P9gGjLEOQBvesBnK/x8/kNDSD7DErflPrYEExtAPe6vLtDPHUj+rMjEKi9\r\nu7PTyRcLZf2FyvVyEIKSs9GG1rzADLtWrndbnpX//FlgShD2WtyQMbXXa0t5\r\nPEcp65rAIvP1biHxNl0pT9uNntWJXrR3hLM=\r\n=uy1R\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"deno":"./dist/esm/index.js","node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"deno":"./dist/esm/server.js","node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"466e4a05e6bc4f8e92241bc538d607530b1df5bb","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","postpublish":" git push && git push --tags","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/debug":"^0.1.1","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.20_1660314631646_0.6966956163386886","host":"s3://npm-registry-packages"}},"0.2.21":{"name":"react-streaming","version":"0.2.21","license":"MIT","_id":"react-streaming@0.2.21","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"9e34bc26af3f51d705e6e2290188fbcc65a34883","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.21.tgz","fileCount":99,"integrity":"sha512-A/5ChiAdfGsSyCYrCBGASc3iFJrBxZmgtVzyVINZQh5MpNL63Ey24xZaDMthtwxNpe9m4aDjR/LBJvCEwdGOaQ==","signatures":[{"sig":"MEUCIENLDGgUbxKRRXL3MsIM89t1c7WPQfeqDGeNKpCGELJyAiEAjXwTeSCASzVq/5FfP0EZsEi1Yxg+FZDAZCLiJ6eyzBc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":91016,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjCzmVACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr/7hAAgLn3fp6Q8KoT//hHbGf0g2Zz+NZVf3B1VlbUgmfANGeeYGD3\r\nDhXEdUiEMozFb0dSLXjRQmBfD/AmgSNb60lQGYYZhahC9z0ptwWXM8Q8O35w\r\njVSNR3tcOpdAufl7XMmH2cOniyRoA0iVcWPi8/NkN6/nIb9lIvq+0h+dLyJx\r\nemstnMnXeQozcIbpEjgQY4up6W05wA9ohK5BURuI/5m94gAuYJL4vaumEaC7\r\nevtFcCaY6Jih4T2+VkFctSttVp5cX6MCGDdRZNcSHrJDK4KO1A9fdyywdEQi\r\nDnIwwVFLwIoGveEWxy6jAPuDHgv4kbgIHNafbL7S5V7QNbfR7gPRRrziUHN7\r\n5kFXIEpTKJ2r1v3bXyHlMKWOTEbAaLg4gbOTbHUwwaFJtyxFznWGjiWrQNSO\r\neae8WrOlB19Rn0Y0IikSTqwNVMHt6Xm1XT3Fj2ABYr4hKjV29S9Z1fYfTDT+\r\nouj1axB+TTYwwGYqLyIX/U8Qn+sjl4vKdlAUCtKzuaTZuFGSdZSxSbBeb56j\r\ngBjOEtMuzU2hNBmlZ9rz9ivNrMvbi35jD3KrJiW9zFhqACQcjWQHzUykbtO7\r\n9OYulq1yyKf+fZv2o95swxXe91Tij/Er6VimCs9cfb4IwIiepfUBVryDBosU\r\n6Bk+/WDLSFW6Uhxu/NKXVuZnhM9Hz0Ubd1Q=\r\n=9SSC\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"deno":"./dist/esm/index.js","node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"deno":"./dist/esm/server.js","node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"d704dddc19b8db34e0b8f82dcbcce347aa90a403","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish && git push && git push --tags","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.21_1661680021411_0.18654027876766088","host":"s3://npm-registry-packages"}},"0.2.22":{"name":"react-streaming","version":"0.2.22","license":"MIT","_id":"react-streaming@0.2.22","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"55325f8be5b00f1f80dd09dbb65878878a19929f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.2.22.tgz","fileCount":103,"integrity":"sha512-SqAYuljWBcF83NT9RTmumrr+WSeLbNoppJq3rZyIUzdMf6VzTPYvWXPMxG5q+Tkf740Dj9+XTWAwFJ90rN9zhg==","signatures":[{"sig":"MEUCIEayGS44BG/n87Uw3Oc16Hu6YDX6KsFCjXVWvDT56SY5AiEA478+IKCpUcByWMse5MeLpYtmu7JaE1o2ubLdgvmvMDY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":92207,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjDFhkACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoxTxAAnWReJyjNM0tWf9pod4PwOLzyPO5gCikygn0NZtAhk//fe9KL\r\nz+e/5b5wxyfzX63qN1esy13Sfpa8Kyy/i/yHNqJyFPaYoIlMvx2X8jI+e/Mk\r\notPy+pb8kBbZIETtG5Z4Hdqa9blR3U6SZcXGY9sNE0sWkgUCDYpAzdUHoI4K\r\nPPkHoVNhtzU8PwexmnbTvf+ObQ7m6q19QVHFp3iXCZAkE4+Y15/8YzgiSA5i\r\nWUCNu8tkhDnup1+W34hD5MA7l6hL8V5Pilj0eH689mjRGilafDv0e6RCrWMF\r\nNtqAQkGaK35GWqD9TufkM1KYrUlYc9lcnp5sm2xzMrn/Bvv3xw+W8FpheN/3\r\nTFL5s+CQQbS52mmqS6qJtEtiWOxTzRoPsd3NjZaHk1Q/n/3US5o9EG+NJZ89\r\nxsN1ObgiJmjLXVwOJtx+nSLWeZoKQ9kJObHRvE567DJIbapGSPInfxSVRVZT\r\nlfAq4fI28alt4xfVu72VnPCGht90TENoSh131PSf/uf/vfKtKZZ6m+cKElC2\r\n8G4uOg1iQAZoRxeSCXP/cYm9pNDsAWnS4rFGT4aOFX0nNJ2rjvhav8ZQDxF1\r\njEefqbj9rGsp7Dx8gHKoFEulh5v/Fz/mnCGdJQl9Ofidih2HCPfOlkgu1Wqd\r\n5TWMgz6Ja3rNyGdNkwlY/bEWfj0Nz8HNll4=\r\n=f7CV\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/index.js","types":"./dist/cjs/index.d.ts","exports":{".":{"deno":"./dist/esm/index.js","node":"./dist/cjs/index.js","worker":"./dist/cjs/index.js","browser":"./dist/esm/index.js"},"./client":{"browser":"./dist/esm/client.js"},"./server":{"deno":"./dist/esm/server.js","node":"./dist/cjs/server.js","worker":"./dist/cjs/server.js"}},"gitHead":"c13c784599f13c75e4ea1e207befce3f58c7f385","scripts":{"dev":"pnpm run dev:cjs && pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"npm version patch && npm publish && git push && git push --tags","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","prepublishOnly":"pnpm run build","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-s":"^0.4.5"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.1.0","vitest":"^0.9.4","react-dom":"18.1.0","typescript":"4.7.0-beta","@types/node":"^15.12.2","@types/debug":"4.1.7","@types/react":"^18.0.9","@types/react-dom":"^18.0.4"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.2.22_1661753443999_0.5555325067036816","host":"s3://npm-registry-packages"}},"0.3.0":{"name":"react-streaming","version":"0.3.0","license":"MIT","_id":"react-streaming@0.3.0","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"202f969a2f34dc221d8f73e8a5e9490d51e2c085","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.0.tgz","fileCount":89,"integrity":"sha512-ZLzyOCP2ACq+bPbbTLJcWwn4DnRY7o31UsAByRNUa/QaEp6wvl+GClIF2EFQFGvgrQPnIE+2YENdmdi09C+aQA==","signatures":[{"sig":"MEUCIHFIrwrdbJfR5Oq2QHMWi32TCizj1xiZrqS2DYK6fDKNAiEAjDnNPpuURLx3yafYCq5JWi2RuAoQkcMzwlQdAG+UCoQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":78569,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjF3m0ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrdDxAAgoyWCi2PpjNoqvbDD/j0D9iBjxJ2iCMHx/5YrAHnKbp3QHhw\r\nJ9IN1EDK7YZ8C1zUd5ysfC2RHvX6i8rNIX8+8nY2fku8e873eNwBUNOtg/xq\r\nZ+lDCnEduZQrGkTCcta9nVdjKMP2Of7b1hTKrNjSM1K5amZfnJXdgSNbmrCx\r\nYt/TmdcN1kmDJEHLcd/ztz73jusKOpuvO+I0b56em+OR9Rik4uyqc7J4bDgk\r\nhprQ89tf+eSFxxwaz93Izei08a4r8M1vLcbd1qps3Vvf0Jqlycc4rBI0v2iq\r\nNbcx53J3mAeP1A70kvjI9n+a2cfzbgnHCjMSzkPDkdNS1fL4kSbNpD+d93dX\r\nuXk0CtQqfOe1nNo/pj+jITOBEV67Q0/2OAyKxb/1TjBuKrmRhiiQIObIHmXp\r\nMfENHqB0tSmZD79+kQmKxsWkoqbqJ7NGms7wVLDCQyiwg5UBYUqfz3TXJNeB\r\ntgsr9xV9F8g/k0oWJqmiCbs2nU4xMGwuEejm+H2nZrGH6OcOJBiRDetcOESC\r\nMmMk8jozN94eYe2rXCnSv/xUnrmXKmatNwvn3lBISug/VShR34sIFtHM5QwG\r\n3glajlAYkD0RGCQK8m8qHFnHKogzsFBg6YIpZMnzShXn83oP3larfPjoPxyS\r\nL+RNGcHawKyzQ6BDccxVrAw17MgeIjIl/6s=\r\n=B+0G\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"226196f813e45108de76149256a3959f79c4b74d","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.2","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.0_1662482868580_0.007639667825616092","host":"s3://npm-registry-packages"}},"0.3.1":{"name":"react-streaming","version":"0.3.1","license":"MIT","_id":"react-streaming@0.3.1","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"82870d32e9bd85f48090f1f32389e44a75227af7","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.1.tgz","fileCount":89,"integrity":"sha512-a6G9Fj7V7kumW9qlWcWbS+ViGS/WHxjiYTjOHsxjkHLNaQVU7D6CeNxpPtkih7ARY2OurUWJe0EGiftTONlErQ==","signatures":[{"sig":"MEUCIQD9IYyvbXeRqOI+SFnhr9qX9W2m7CgGQkp5Ou13cFoARQIgacd+93FYe0NKOMkFmTw2Ui2hgJwWlmzIPU0dNN4uNgY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80572,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjGHriACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmodQA//Tk055BPxX43i5vH/JWWRmJvRPlqFGHzzKXB+I6LLeibB71LC\r\n6Cea1mW1lUyaUJ+mPIKWMoN3q4NyC7hg7ww80M2jUT/1lQL2uF1jxbTmPp+8\r\nwhbGEETmWn330bI+SbhbKXjId6IvUiA24tEUghxJuQtpPE+URcQxk6j7g/nl\r\ngB6mqTgUqjOHAV4qtnvhALFeC7a1+hMZxXWEo83a5xA12qveDosWcBgDThtv\r\np6pc39O3Xk1yN9AeS59HHfnobnSxJ6kivqrejcgRhgt+5Pqf/4U6u11LJ5kx\r\n0boy5+zU8FAvDFO5nGo0CDcIrrfptWTrw/D5r3HzS8Pomf1Ro1AykdxB1RM1\r\nWRl7Cv/fjAewMhs76giaWoYB7tsqK4GSLN/YKA3gRnlCIbQkWltZeUgXf8MS\r\nHlP6C4bLQrcKaG+dwgXVu6ln4DCX6DqOIsWnVr2wtsENCZsNu9bv50lKveP5\r\nJq4kc+abWA//T/Y32guezBb+kNmH6dvmXcabe31wUJ8LyvFJUE8Rr3ljibjb\r\nGhb3mGq2ShzQbp8W3tgjfPwbA4v4+jk1P0dunYPN3fIXm13I3PTRmAY33X7b\r\nZpha2IO9YRqbBRxeCd4GSBtKIejWJr80isI/zsAPbHB3h5LhlNOHNfVO1MNS\r\n/1M6nCW5HPVayhFoImXSpKB19aKGqOuW7mk=\r\n=FWsS\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"e436ae8647f1053f059341c45c667218d6d30217","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.2","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.1_1662548706714_0.34741011512143305","host":"s3://npm-registry-packages"}},"0.3.2":{"name":"react-streaming","version":"0.3.2","license":"MIT","_id":"react-streaming@0.3.2","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c311b7ccf7510d6c25b9031b7629522cd91f1522","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.2.tgz","fileCount":89,"integrity":"sha512-VED+77shvmGkREefO6B3EvJ6lLID/JUn3QkUMY3CVwlhGwMdsazfME89oChI/UlZUp5Y5a5OkVl9z5GI5aZkAg==","signatures":[{"sig":"MEYCIQCx8trTjPp431SLnFHLXmmjlBw98eXrhHpR3I15pFhP/QIhAN+EjmPzacyiHK0eVCsbBhgphh1P9NlBIrQqjFmMw8eU","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":81692,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjGOjOACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqVSw//U9bCGnrj1cqJDJs3nJbJgfp1YiVBhtWgJ2H9iSDBAlmws5dO\r\ntZEQs2Q3OtcCfz7R/l9CHdUlJlNJS+xL3rJG952sQ1Sc/7zOTqtVNf0VHLY3\r\nk0BSRgRv9nolakH9Cornsupa3j+3DG5ELDX/XIuXVHhlly0has3GQwZsQS89\r\nNxi5n5zmBqYR5kxrm1toGIulFtzq1aJu6qKKGq1UxdtB+Nmo2TTnl96OZ2/g\r\nU6r6uT2TOgz2KvhJEAoHDbpopZ1dEHsgj2C2ZKrNN2YsWTtj9D9PqAaeoF8K\r\nMXzSSy5cvn7QTFvqeewA5cNPA6ObDDJffxcditCr1q1jcg9Kf7nGQZI7XxL6\r\newGHwUPya/2boOmq7mIij20FauWBAPbrKN+DrkFJnHdhPeC6j2Rp+Te0dRcg\r\nVYXDbgJ07qgK9MxxiaffD0fHNj/CJmQpZSal/FtC1K2ZZFQadtu0wzpG7PD5\r\nhWeMncbu9Hlcac6Z8mpnQ1IuRGE2+tpgOattQ1ZfCCMDCjZMamuslHZaKmiz\r\nnSblWc1v/Y8Ufzvkf7xAHjCQ1h9mSnEEBQrSFQWYi86BFaaTmYta0RLvUghM\r\nWYjQ1un2OLdpB3cCI6nrBqxnY2EG6JkF6Vp2K3XYjeRCl5XtFQ49jgvJNPGW\r\nYk00INbE47xYYyK/HMIDbDxLxrNxAJuJgQw=\r\n=5GGK\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"e7593881289229ee252fe362e19aa2b43a469742","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.2","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.2_1662576846384_0.8440494284742461","host":"s3://npm-registry-packages"}},"0.3.3":{"name":"react-streaming","version":"0.3.3","license":"MIT","_id":"react-streaming@0.3.3","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"78d34ca061cfc9f466f0f0508b00e1da7e1bc846","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.3.tgz","fileCount":89,"integrity":"sha512-f6kJF4WJa3aEZ+UbhrJZsYQh2qiGyozGXn9lLYNu1pm/1fqkKo5bJjFhM/J1ivJ1xEsogSaqkpifc89nR94/Rg==","signatures":[{"sig":"MEUCIA3sLryXShFpciG98u7+EkcaVy6LhoTUzdA2c917snQ0AiEAqZxI0+LNoWRp5NAkhDXccCapc5evdmUieQxLxDHJAak=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":82248,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjIYmsACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmokAA/8CW3efqezZzjXq0IsusmmkjOPdgvjMeuVDHKNvJ5IEFDKHCND\r\nUfkqSyVmFTzYZsvXgMqs5hQStA7uYlgaXyTuG2HD4SsmfVrIHQpmz9sSZGAH\r\nN2UWxQ9tncd/dfAN2wgFg+ZH2CTu/AkMsJFfPsGU+IXQiu0bXyhRAEfq1/2z\r\n3QQHNWwcPcvhdtcL3SPD3+1VnGB68Ew/2tEsp8DJLu9b7h3tqA4I2PIO+5rj\r\niFtuRK4R7xIJi1koqzdqd4W5+FS8wRXUfw2kHfQHvZIs/zjDMY6sK1x6oB4i\r\nFtrSGtdAJHR98TkLZMsYsloKCJ2KUF8jizp8U37M2gUGe97X2322Or0HsSO3\r\ndiEbrORkL858GjyauwMyoVBfRYN5SbRCJXZNzOxowv/rzAmk2ROXTsPkdMe6\r\nTlKZ6qf8UEDX09s+Y049DOSS7HjwrbiJp2KoVOK1tutGtWaYaKRfpFuY5MOV\r\nRdqfw6mdbMHFmxj9JG/pSpA2fLhgPo/adGzwyJM7YSqQz1uXuKBY2o5PtXHH\r\nmUwldh5xdttUIGTmV6Aiy6lB55vvQfsMU8JUNYsoM0VKkyjUfTKGFUPxWp4O\r\nHLJmjMtyDQUalCJgAdIn4dO+tHlfpFRZzWfBhpAn0tmK2BFr8hcsrXCjqNNm\r\n6AFVPmFz+rUiNbgFyt07BWz9R192nc/ITxM=\r\n=LOFU\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"8dd1d3a1f9e06130a22795c1d614983c2ab75935","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.2","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.3_1663142316200_0.27487663336977186","host":"s3://npm-registry-packages"}},"0.3.4":{"name":"react-streaming","version":"0.3.4","license":"MIT","_id":"react-streaming@0.3.4","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"000abc8c49f6c0b7dbc6125cf6a11f0b4583c103","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.4.tgz","fileCount":89,"integrity":"sha512-qq+GlDV1faZFwFXRdUqOq6iaYWEfLTibGFCgZse6VxLirGYUfABYKnU8/cjpeeC1fboa0zb0bUeWQjntzW9hCg==","signatures":[{"sig":"MEUCIQC5lrek7Ge9cCkUwRt7suEYYIA837gFH1Tt1EZWRhqo3wIgR57owJGUuCr1kzPnBmPhoGqhJFtHI91ZmqRpQQO3OKs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84687,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjPsqBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqJ1hAAmzS5nMJaDZCBP2yVF1zz2oG4bgFyjaCHS/8I8CnC+1joHd3P\r\n5xzzzsXtDSzDAfghN0SVpRDoueQ5f+/aBsCcUe4LgvZIeovfe+Zj9OzKpt0h\r\nChG6oiH0Qi1VPs98m8PXoSKaqLhsQka9J6e/AfuJAg36xr3mVM+l/Qz7d5Rp\r\nk6lE8TtYYdry92aVG6CMtKZVHbV0P6D5gDq56FmyBb6Ildg66PMSe6AMZfNe\r\nYKM2x0qyEoA+0uk1Vcbkcbu79n5OFRYVoh0LPFJRr6G6wQ1cQFsMkglCK0DM\r\nj8cS4O849b6yMGZYVD0i0kbGJIxAacPnpAgyhNtmY79o5ENTZGO1o+A2Z6nM\r\n/Y/jWjhnvKzoDnvZy1Y4KCw+NhngW8B5rqZcbGGHUoyoUy+S4cABnh5f4zNa\r\nZJ4nshKda2Y3NXfT4jSlfnrTFU50CxcM6beSCmJarqBL7Yop7FhiLkWWEv2S\r\nfdiC2LJO2MliabZzt3dpoE/sKpBGmnPuEZ2XfMM9PwdL00ooRReQ6dlnhfOi\r\nE8OfXUqbCmvfxfukaIzHYU8dqoB5HOqGc9Ksvc2IWKoEJ2G0gO59FtnO4sgO\r\nUqyuZ95WCAMyCa1YwnkxMQmFprMIS3P5OY3mRvzjQFXgEjgcTsi155EqLjMh\r\nABLvlynB4lxAvMFFXXpMKI37fkXZ8XfI8ZI=\r\n=fx8M\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"334943f4cd8aa9d557c7262f95eecbc8ee11f546","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.4_1665059457513_0.21916277439035636","host":"s3://npm-registry-packages"}},"0.3.5":{"name":"react-streaming","version":"0.3.5","license":"MIT","_id":"react-streaming@0.3.5","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"e39df83e3f0699423d6803878d79f1fe8d33a99b","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.5.tgz","fileCount":89,"integrity":"sha512-/Yy4Uarn2qiGe8pRY+LvzFRBAVjU2vN8CfzQI9qdW6E6gbqg6PsCgy04zudZO3Ht0xwg7B3WWZuA+kZ2HHwR9Q==","signatures":[{"sig":"MEUCIQCtdGbGBj7hIqBAsbPS+9K+5PCDHJorikhUJU0JwzHjDQIgPVBWw7c9Dg2/WsqOiP7Cu4BBzdEot6oYbmDVFgzKmlQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":85082,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjP+3ZACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpilhAAg/v3BkyYW3FIIyJ1jcF5OPA6MrBUvt2Xw/DV8SWriU9KbFDq\r\nD02rnOlf5jsA+HuwkGqcDEH4R2LUVGP4tIH439dcT4A7WvxQoOZfyUYt1Qd6\r\nvkDrbvBz+yuml6ptPPl0jnrK9q58KiYQskUZMFxASofUkyIZG0zo0/j4HXni\r\nwjjJQClhLJHKbp1YqPo6w8OApe94xFkvmKdshqRVPLKtjF7n2YOMaAQJ8wd5\r\nulPBZU5Fhwf1VbtHxb2/tla2V7XN32fOiBB/E555BANniwn0IdSZiFaaq5bX\r\n/2xCwMcoVxXV5lDGU9wsL2Gg77gPZOEWP57QAma68j99nijnu8ZeY2ZrnL40\r\nG5kdwPowdPsloejmAbZ4p+6CDeLlCIpKTiguZwiBdj+R6wLmSsK6P4OxIQhe\r\nPsGwutWmDWbuVPv/UkFVFZhAeS8aZOl5tChul4aykjWymyzfW4QYlnEbrwmY\r\n/9VR3/bPoRc5HOBoKOBL4o8U62SZ3i+c993X2ct8G2SIsc9Tkbxx/tGpBThG\r\nDOHdpZRb5rvrObGH8v4muio6DsRgkFCAJqPrkb6eJcSdvWt5ObAeRgfUJrFw\r\nKP3CnoFskHhs7c3bNF0K3U1iRxsPsN4qj1lxJP4epJXyF5v8y1MQ5aSJ+Dy6\r\n8y2Hq4Z/LQw8WYYD7NbtxCvWRlgEQY48Wco=\r\n=G887\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/client/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/cjs/server/index.js"}},"gitHead":"034fae9584acefe6264e2c84cddbf72fe2b6143b","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.6.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.0.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.5_1665134041412_0.7480872540621302","host":"s3://npm-registry-packages"}},"0.3.6":{"name":"react-streaming","version":"0.3.6","license":"MIT","_id":"react-streaming@0.3.6","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"d0ce16cf8b93204fea7b252b20593fd8d34e0021","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.6.tgz","fileCount":89,"integrity":"sha512-HatTA9UMsZMFQIUfG8zs/DQbKYRzrd42mLzHV+vP06WTCECWfgoBVVE+9vgo6qRBmHfIfrDbRqGduCDrsDufPw==","signatures":[{"sig":"MEUCIFxMBFOypEzR/SMDesxhROIHHQTfeyuUllrCWRS12L4wAiEA8611ma3bvdOcJpmbCbJVGICZhiSxBRQfGotggQwpEbY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84846,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkGakSACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo/kQ//f0xGBuiHE4UlMLJL8acsYfwrvdFQFdlDgaxXXWoSdZTTrcxf\r\njgDXiXyXUIcJdZo0SHPFQEJ4h/42mUG0C4xSY9rgXanB8882ZhpgQmcaZbnm\r\nii4HnX2rRVnL/jfId9WJpX1hACPzZpZcNjdtu1TZHflNl09ysJQ5Okj5QOuX\r\njp/HCeG75wibo837p9fkcBg/zdkRG7Ad1WD9oWl9QSqB2ijKCoI9DOHcK7ol\r\nhh31kwPcr01bitWPTsJOFDzCft/Fw7Uu/2v2N2vUg2vw3amONyp7g1TyCduh\r\nKDY8sWMXRD1lVtH8nDC1pYHsCZOvWKrgzT6D5xAZifnOr2qkQhHwnQJKlW4A\r\nECjF8ATpW8/+Wc83KOyQv1vwsXrz0SPOY0ckgvuxyLuzT5zNAJoSgQwKnfxP\r\n/nmILoQOP7uEF32p9+c4UCh/rrwSbQbWfo5Eym3uxS7kus95DncXjhB7/WGt\r\ngB+klx5NeDUA3p6e8D71cIjemRQ4qebkXZI60sT/SgL/s0qpijRqyDGa+RYe\r\np6EvDaif6ib67JiwNIaki95KW/nK7Ww8ilJfIrPJ5gkmlYClsZoBSd1c5VFq\r\n9pEHnt7SBt3UCpe+1mmbXvM9gx0W7Uln+LuYR7cZISxD1DU9PcJSbnyLK3q7\r\no++Eqy0s3lgDbM4sgn9x8qTreAJCCQuAqu0=\r\n=JaZq\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"node":"./dist/cjs/server/hooks.js","default":"./dist/esm/client/hooks.js"},"./server":{"node":"./dist/cjs/server/index.js","default":"./dist/esm/server/index.js"}},"gitHead":"359e994a19e786127af4bc69f7227fe7cbbb4f2a","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.6_1679403281990_0.7138032367149136","host":"s3://npm-registry-packages"}},"0.3.7":{"name":"react-streaming","version":"0.3.7","license":"MIT","_id":"react-streaming@0.3.7","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"89f9f77884026545b3cc8f0ad1ef760bce43d908","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.7.tgz","fileCount":89,"integrity":"sha512-viQGx51pJYlCl+7jGIZHqvdGNRXoqR7/ivY+vb3GhYPbpgVyA8pJi2NjhOzKmIgCxeGuQn4IuI9R9pwpHeEbUg==","signatures":[{"sig":"MEUCIQDmgcJ5ZJOmuimK2IfBGVf8Q7donzLeVC42fiKlfbkg+gIgZqjSdAQYeQTgeeQUsm/KGVIP3hZUTPg0mpeiNLciCPY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":84893,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkGa1AACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo10w//Wt0YqelCeBLUB0z9k1VIsKtN6Ugwh+rn6kNe5STLobGUddqb\r\nadi8fUObTFhvU29oBqlhwDwD9IaQO+Pcg9TJuRyjWOTlMtfx1A5GlktrGu3+\r\ndRYUCB9RgdYfrEi7/gVuab0siRAwRzc3eVEue4qTPBT3JSuHUSjmm4R5BIqe\r\niNF+6fzT2BVDo8+ma7/Xg2+ibHbDrdiOufjbOJTq9gLDh+UOa6dGUBEegCn8\r\nzEj2VtrSYKNC3O9glI85MUZ6h+p2qBFLtkY5RGJ7bKA5bL2r4z/N2m4n8xWG\r\nRkzfRzQDK+NUppp5lNd/Ih9BwaHNMcSbnvv5Nl4jkIGHL5YGYTWUdAodFTdC\r\nxv/hsRp/of2hthrAfWU/wqVJ/xsYFs+O0jQxVr1AuBegWR1vcY5/6QnBgdo6\r\nJjRy17WAMgknKJpkB3jRZLwYNvaxOUTRZAVJuq9Y2yQpVB54o9prJ4jXJ2n8\r\nR49EnB5zzGU+F6D32Cxljz5EuLrHXB0d2AniSHklfJs8PYMm+k3PEisIUvjy\r\nmNFy69JgKt+S3XGkDDK1baKL9v0jlxUWrxrkrRFIKCkYNYz8wSrN7ZjGVJrk\r\nx5FlncvTkwr7wDyt0ZeICeOf0CZ7OupPwuodXf2lS6dB++bgYmIBQH/X+msn\r\npMDSrdN9+J+WJOVE/dNT18BGX2qX+5d2x/Y=\r\n=7b2L\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"node":"./dist/cjs/server/hooks.js","browser":"./dist/esm/client/hooks.js","default":"./dist/esm/server/hooks.js"},"./server":{"node":"./dist/cjs/server/index.js","default":"./dist/esm/server/index.js"}},"gitHead":"0af5861ffb165b450e5933fe6dd9764fe87772cf","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.7_1679404352158_0.924235849545558","host":"s3://npm-registry-packages"}},"0.3.8":{"name":"react-streaming","version":"0.3.8","license":"MIT","_id":"react-streaming@0.3.8","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"14d21eae3db8aa223a03219f4c6d50ace690d91c","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.8.tgz","fileCount":133,"integrity":"sha512-rkdPVTWKXG59uQ8+dtY78AcaCFFIwl21JzYGF7Lpxpo29mKYjALe0/4wd0Ktw5AxXRcDwwF0C23VcDLrbneRMw==","signatures":[{"sig":"MEUCIQCPEc9vtsdeMmi0DiIopLSw7RayVyGzag5xVVq+WbPLZQIgfwaURZlfwXbDELwrffOrHKQv5I3nt7l8A911NzwD1lI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":116972,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQTRBACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmolaBAAkCAuT10fBA0aTcN72vyOz++lqFz/AjGO62cWBVzVphE8Dt7T\r\nHnB2DGAv6PxyIVIkdYu1o/bSTP94Oh6QhAq2muL3uRK0nQ5MGLFwb2x5byVB\r\nkmNoLTFxrPJ5hp9Omk2kKBS3S2AXHFBqdhsWakaD0kcqMfUmccsbYVZsmf5B\r\nte60TP8QQj3Xxt1U00x0OOMqgE+PMGQ8K2j6w+mZIlcu9p2WsJDYfDcvYRo7\r\nI9jsQ1Ncvp4uSJCyWSe7e7t7JHVG6t1y92ci99ZwMuWCzRecYSB290j0XSn9\r\nMkEbNOfSs5yI9HdQGTBeSIYeh2zUJBBbz1k7W++961aeWRs3tAGqrmMQpiD+\r\nZRGbs/TwWW5arvolWKMv1Tj1KgG0PPAcNDW1+qnewCmjJv6XjwpXjr8OZzyM\r\nIETwet23h14zu3tLaI9fLLQTDmMVIbswhwCXwOMw0/x003GqNqOMCX4IDjAG\r\nULcbMUrDJuP8ushtTHhmYSYL+78tbIb8gkvgJdJCQj7MLvQq8p8/ZkbEYMmT\r\noh+YPols3loM1+/x1rS/N7LRd4piRsXhiXfO764AtEkI4Xt7ZTV8QMwS/foA\r\n6fMgN0YKKmiaJIz6sg8GvvVi8JQLWeSfqPYMuFNOWvkJ/aUCJBVDManMpwPF\r\nT3CmaztMvvS0HOwPmD+0N55NMmh9aeisnRc=\r\n=gy58\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"fe6c2bcb0de5611b99ddae7bbbbb46016c82951a","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.8_1681994817370_0.26271196445972667","host":"s3://npm-registry-packages"}},"0.3.9":{"name":"react-streaming","version":"0.3.9","license":"MIT","_id":"react-streaming@0.3.9","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f017605aebab18bef7fa6607775de288bc500682","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.9.tgz","fileCount":133,"integrity":"sha512-P0sn1dXtJfKkJMZZoPAu3YaNi6008a8sUg58XvYb21nDepysKWC7YzZCQdEhw/dp0r5s3nxDcrUmXFHFiGaf7w==","signatures":[{"sig":"MEUCIQCaMW6eUAPJms5yaJr/wocv20Inwx3LKkRmmDq+5/c0VQIgI0q8BzbyY1u/MAigm9tyfENDyB1NBca/A2GKtzSC3Ik=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":116972,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkQT+3ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqemg//VrJ75D8Js7d4myQiZq5liO0XwTitcyxU6qO7tk54pa5OnBO/\r\n87+BZ5JReLaxkb4rbIJmtok+vpOphhE1LAmj/PBilVyHDMbFLuos/4KMVaPz\r\n1kiQyPEnm9wrFyheU0tAT//X7Zhzn9xCVGOmGXBPFoO7hCCFc+rOfAVNaflD\r\nq1DN++9OD9kajnu5+A9jCERPCPq/Y9Sw53yUIuD74tTnntK4fToPEyvFLsjI\r\nywnRKFSh8mGziXtDKeVH2aN6VDBZkyeE0asdOREqK1WNJZP54NSFzorams/w\r\n1tPC6CeQpwrbncwhBN7jTuwR6830yN/ucOJEBEy9WYvtfwgu85VdAi1CvAaQ\r\n+n/lzpcId7iXeY0rf8BAPPM5FoPgoe/ZM/gs3QnT03uZ50BNw2N2iJosEScN\r\n47tF/W8pNoHMhj19g01Leqk89D8pqWT9Cwb4wszjbYUPq2o21vOPwoxRLdgd\r\nMVn6QbdMreuUW89XIl7Vrplplr2DDrtng87tff8ly5PZFCnQux7ssmB/piwT\r\nWVOBqbOT9OQ7ZS7jesX60CjRBJvJdJ4wvYEldnFs7cj7OfPQZRiM035aTU7P\r\nD4kc53WQqI/vx3V2R86+p4b5okyCTmVf4ImPOqykPk1xI8rtD/vHuOlXl2v5\r\nqv1J/GIdDghCGT+Eck7sYB69ETlvTI1VCn8=\r\n=ZPRK\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"88fea9c7601a6b74146b8648ab8c6c2df9ab07d5","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.9_1681997751422_0.24814153555864493","host":"s3://npm-registry-packages"}},"0.3.10":{"name":"react-streaming","version":"0.3.10","license":"MIT","_id":"react-streaming@0.3.10","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"fc597874bba460bdb207ef61e7c5cae99e9f04e5","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.10.tgz","fileCount":133,"integrity":"sha512-Cf/aritzKGDUEBo+jpsNKlzkNBTmBM5gYM9jArPuoBqmckBikALYu7YvQbTHSG4kbpSitnoBIUH2005LAxknBQ==","signatures":[{"sig":"MEQCIDvbs3z4iHdAu0Nstzf0YYphiK6iv896pEMp826SJ1dYAiB6xjuNLBByqL8Dbm+IdvjvnNoY5BAIp0JE3sNr2Qn16g==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":117271,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkVJ25ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqqMBAAoNF7XYZzD06E/gDaui5kS5EOHjYHKYZao5ru0njgOaMtKI38\r\nV29YOZzAyfwg6dniQnfEqWH0pIc3qlqqWLAPZ3+xC9BpzRlA40NH5RoZTNgW\r\nOyCtpJA2pX/B6L2hfc5KAzkeZHO+U68gsh8QX+slfweOFru3KZr+L3g3gOpN\r\nLoZTmJ9T4bDP/sa+Xew3/7sJTkWhq70BKqHjF6iGW1CcLYAwSq+k++LB263V\r\npH3RK5zPcmoH8xW0sT4A/8Y/ABTfzJ0xmqYSbKWVw8Bcg0386glGwiAlDRDk\r\niK7uIGkQq4DjlWfcD5oc8682oSc6GDATK7B0iNhGwA/piBODwcx6iQzD31h3\r\n5OhHf1thbCZbXytcl0pXdFRvcr19FdbulV3Kjejk/JNITUhWut5sJ1imD8Or\r\naAjX41f5H3F0VL+djM2OfFRgKcXbyHcwndNMK8QnJHRUGG5WMexMUNLOlpVy\r\nO6wfe2bb6QPmNOBID/QRIdN73IXoNa7cAHadPNwqo0eeuvkndxnZVSCSXGjs\r\nIVLcNhUUXyXXZWoHpT1BPH7PLFtTVNNZOdNEcKPA0sTwifITf/wLcJkYITCy\r\nsmmIcHlSUcdZu9PcFi9n3CGV9cWbCb5L66eiVPsLM15a02dUnCv12+wcp9lA\r\nGqSQ6eOMoh3yBdDWTW9jM0tCuaAJhLEZE9c=\r\n=Yst5\r\n-----END PGP SIGNATURE-----\r\n"},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"23f892a4f1955ae9bc8a87007a389fd0340879fd","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.10_1683267001096_0.7672822600090323","host":"s3://npm-registry-packages"}},"0.3.11":{"name":"react-streaming","version":"0.3.11","license":"MIT","_id":"react-streaming@0.3.11","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"45774f9fb7b6b8f5cf48247aa0221d0e68bd6faa","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.11.tgz","fileCount":133,"integrity":"sha512-WcSYY4vaw+Pi14sYZTjwT6eKO4kvIA7WKoPXEJ9SENDg70DOKAaBLaBxyRJFbqRv0p/NfOKcQkigOWDmvjN8yA==","signatures":[{"sig":"MEQCICwLrJ42WUfVJjcZPXQqkdDdNiqV50KQ+sEQxoqDA0VVAiBcJUOSVUUxoyJreVFCwjlFt+CqL+uP5FAntPvbyjjf5w==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":117893},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"108abad6344cad405e310ec34a271f981feb36a6","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.0.7"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.11_1684500422393_0.47654912191881516","host":"s3://npm-registry-packages"}},"0.3.11-commit-fbcc062":{"name":"react-streaming","version":"0.3.11-commit-fbcc062","license":"MIT","_id":"react-streaming@0.3.11-commit-fbcc062","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"7f69260c2bdd7d13337aefeaaeefbc0438212950","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.11-commit-fbcc062.tgz","fileCount":133,"integrity":"sha512-maD6pCpQIBMZ1IH16UPKzXMAR5NJXeuPaP3/OnmK8+r/vUC+2ZvrjRhsat5xLOpfExT4Bc6+3O82FvM961W62A==","signatures":[{"sig":"MEUCIH4aaCOPEJe3dyqfrakDnNgC9VvOoIN4gsa4M2HNR8HQAiEA5YNeqQwr6mBonWVpl90785zLYulwPyYNEqw0X/7sq3U=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":118672},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \nChat: <a href=\"https://discord.com/invite/H23tjRxFvx\">Discord > Cubes > <img src=\"/images/hash.svg\" height=\"17\" width=\"19\" valign=\"middle\" alt=\"hash\"/>react-streaming</a>\n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make `react-streaming` (partially) obsolete, see [React RFC injectToStream - @sebmarkbage comment](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- [Get Started](#get-started)\n  - [Options](#options)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- [Get Started (Library Authors)](#get-started-library-authors)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Coudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and users with a poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com/) to easily fetch data for your Next.js app or your [Vite + `vite-plugin-ssr`](https://vite-plugin-ssr.com/) app. (Replacing Next.js's `getServerSideProps()` and `vite-plugin-ssr`'s `onBeforeRender()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on the Edge (.e.g. Coudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google ranks your website higher because the initial HTTP response is faster. (To be researched.)\n    - Con: Google will likely not wait for the whole HTML, and therefore not see it. (To be tested.)\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP User-Agent request header. (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: Use Web Streams instead of Node.js Streams in Node.js. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errros occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side.\n// The data fetched while SSR is automatically passed and re-used on the client for hydration.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Get Started (Library Authors)\n\n`react-streaming` enables you to suspend React rendering and await something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side, as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between three methods:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // `useAsync()` suspends rendering until the promise returned by `someAsyncFunc()` resolves.\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"fbcc062ee46e61ccf0df1f6819a42f5ec21a6480","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.11-commit-fbcc062_1685697168303_0.5018350766939277","host":"s3://npm-registry-packages"}},"0.3.11-commit-4b29944":{"name":"react-streaming","version":"0.3.11-commit-4b29944","license":"MIT","_id":"react-streaming@0.3.11-commit-4b29944","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"946ea0346743d6cab4b8a815761b726b2d36771d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.11-commit-4b29944.tgz","fileCount":133,"integrity":"sha512-ED2xL/7xSZt08eLi+6FYMhzk+eh68pl3sk/zVEj3ELNDHb57G/65gbz6qpwJGXU/DxDYPh9jKf3I1PY0dkPOiw==","signatures":[{"sig":"MEQCIDt+o5VvmCRpQYGpl4EL9NqlGenCuSE8kPfKSA7+D4gMAiBfaycpWlwK6x9VKZSC4WlBfB4uWMaP61u9zh5ppF50lQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":119466},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \nChat: <a href=\"https://discord.com/invite/H23tjRxFvx\">Discord > Cubes > <img src=\"/images/hash.svg\" height=\"17\" width=\"19\" valign=\"middle\" alt=\"hash\"/>react-streaming</a>\n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make `react-streaming` (partially) obsolete, see [React RFC injectToStream - @sebmarkbage comment](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- [Get Started](#get-started)\n  - [Options](#options)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- [Get Started (Library Authors)](#get-started-library-authors)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Coudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and users with a poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com/) to easily fetch data for your Next.js app or your [Vite + `vite-plugin-ssr`](https://vite-plugin-ssr.com/) app. (Replacing Next.js's `getServerSideProps()` and `vite-plugin-ssr`'s `onBeforeRender()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on the Edge (.e.g. Coudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google ranks your website higher because the initial HTTP response is faster. (To be researched.)\n    - Con: Google will likely not wait for the whole HTML, and therefore not see it. (To be tested.)\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP User-Agent request header. (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: Use Web Streams instead of Node.js Streams in Node.js. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errros occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side.\n// The data fetched while SSR is automatically passed and re-used on the client for hydration.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Get Started (Library Authors)\n\n`react-streaming` enables you to suspend React rendering and await something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side, as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between three methods:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // `useAsync()` suspends rendering until the promise returned by `someAsyncFunc()` resolves.\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"4b29944d8f488ada14cafcbd90c974156ed65dfc","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.11-commit-4b29944_1685697841185_0.47334630655380217","host":"s3://npm-registry-packages"}},"0.3.11-commit-794dd95":{"name":"react-streaming","version":"0.3.11-commit-794dd95","license":"MIT","_id":"react-streaming@0.3.11-commit-794dd95","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"1694a29cfa05476cbcfd6930dc4e4f9ce6b631e8","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.11-commit-794dd95.tgz","fileCount":133,"integrity":"sha512-9fdH04VsBtkBSXV3XZcNhp/lbi7VZykFDcvZHaDmoRHd3i+GfsIAESe+p2TePE5U9dcgTVUcIFF9QKYisfLp0g==","signatures":[{"sig":"MEQCIEh7A1oSbEhFCxW+YMAgHeOg5Sf1C4+O0OrM+0FtVTriAiBW7l0Vc3ivkySc3Yw3HqJvw3i3bxdQd4DeZDZt0ea0nA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120761},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \nChat: <a href=\"https://discord.com/invite/H23tjRxFvx\">Discord > Cubes > <img src=\"/images/hash.svg\" height=\"17\" width=\"19\" valign=\"middle\" alt=\"hash\"/>react-streaming</a>\n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make `react-streaming` (partially) obsolete, see [React RFC injectToStream - @sebmarkbage comment](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- [Get Started](#get-started)\n  - [Options](#options)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- [Get Started (Library Authors)](#get-started-library-authors)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Coudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and users with a poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com/) to easily fetch data for your Next.js app or your [Vite + `vite-plugin-ssr`](https://vite-plugin-ssr.com/) app. (Replacing Next.js's `getServerSideProps()` and `vite-plugin-ssr`'s `onBeforeRender()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on the Edge (.e.g. Coudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google ranks your website higher because the initial HTTP response is faster. (To be researched.)\n    - Con: Google will likely not wait for the whole HTML, and therefore not see it. (To be tested.)\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP User-Agent request header. (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: Use Web Streams instead of Node.js Streams in Node.js. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errros occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side.\n// The data fetched while SSR is automatically passed and re-used on the client for hydration.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Get Started (Library Authors)\n\n`react-streaming` enables you to suspend React rendering and await something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side, as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between three methods:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // `useAsync()` suspends rendering until the promise returned by `someAsyncFunc()` resolves.\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"794dd95fa7332d30deba03e1bc66b1c7a40d8a38","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.11-commit-794dd95_1685698385681_0.8279680425871172","host":"s3://npm-registry-packages"}},"0.3.12":{"name":"react-streaming","version":"0.3.12","license":"MIT","_id":"react-streaming@0.3.12","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"abb4d023921874ecb687a46fc65533d113e0dbac","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.12.tgz","fileCount":133,"integrity":"sha512-j/a2w9gGJfG/wxRzpe5gR8dFxVyya3D7sMGX7ruTB7sMvzvE0nIxScaHoAZKk2F2Q2JURFZKa2nzhSM15e5G4g==","signatures":[{"sig":"MEUCIQDtIdnhHccgy9Pai4QZ3RmIM+x+NecrQAwOHdSQcvmAKAIgDhLfAhZouUWoMEML+O9fHRUNHxF6R+0Zg2uoiDjVFms=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120716},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"e8b4f4a5ec45bb4de8546c46aa004ca42515bac3","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.0.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.12_1685698555634_0.11924497658304567","host":"s3://npm-registry-packages"}},"0.3.13":{"name":"react-streaming","version":"0.3.13","license":"MIT","_id":"react-streaming@0.3.13","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"d0ca3ec3ce66d277b1d343fea5b3d0f420c7142f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.13.tgz","fileCount":133,"integrity":"sha512-9gu5QIuJRRZUtEAnao8g9Yv3gEsSXAY1JSMwIeSdoNZl3EkTfyhNFZrLj8Z2VXkPYuziqGhMmpbQQwCJq68W0g==","signatures":[{"sig":"MEYCIQCbyiCX175QiUse2u8y03PYsRURvplXz6PwDlNkpoFRvAIhAO7Y1AZGWPhfOrqBP22xL28Mx9UL7PzLhLFvlsooNYQP","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120371},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"a5b8810d9b1449aff3bfcce784cc6a48cb19d929","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.13_1685829236581_0.6229194223102188","host":"s3://npm-registry-packages"}},"0.3.14":{"name":"react-streaming","version":"0.3.14","license":"MIT","_id":"react-streaming@0.3.14","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0dd4da65977ae536843163c8848ed60998c07be1","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.14.tgz","fileCount":129,"integrity":"sha512-nYTYNp1NjJbEDFiiN/NpuUOhDm94GszLD/aGxXRtbYO2z2GlvL3S/OHjku17+qFfP91IQTF1fcHcvjCKEd3Ong==","signatures":[{"sig":"MEYCIQDychiP1R/R9kdjIwqlfillcVEqc0qPB3tEtrIudrPh6wIhAPQhIMyw/C0i+NIsiZKeKAS56aN7aZLt7fymml859Og7","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":119355},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js"}},"gitHead":"4928d74d840f55e7f496e34f4691622831b4a4f2","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"8.19.2","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.12.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.14_1685865148292_0.12337347448977032","host":"s3://npm-registry-packages"}},"0.3.15":{"name":"react-streaming","version":"0.3.15","license":"MIT","_id":"react-streaming@0.3.15","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f108896591a463bd2d9728ff0c6692fff0c1d847","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.15.tgz","fileCount":133,"integrity":"sha512-4WEMv9iBSQP+N3rlKDnIF/AQZS698Cnd6dAzsD27Hhzuzrc840omVem50luhAEXTexhsEefHE0dN6IhS0bgN0g==","signatures":[{"sig":"MEYCIQDJyrWt4wZFu3vi62jbRR2crsqESoxiXvach78QlrMfVwIhAIVlw6zv/iqpkxlvuEa27MPw+ObYJGHUyvrwErq6X4MV","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120168},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"fd9096e268a090aa1ba66c869dbc5729c0eb19f0","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.15_1697444394847_0.36791381193816686","host":"s3://npm-registry-packages"}},"0.3.16":{"name":"react-streaming","version":"0.3.16","license":"MIT","_id":"react-streaming@0.3.16","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"5485ca5a2876f9c96675cba043522a3c0ab6362b","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.16.tgz","fileCount":133,"integrity":"sha512-ybLJrC/s1eVyKEwul/MQbLSCCLof+Olk0Bhg53N2j/1VvO31MyuuRgMccId0z3ijxpoSiBCslMikNpc3lrC37A==","signatures":[{"sig":"MEYCIQC2i9e1mN7TitdYNIzv3RG0CjveZpA+3oe96lnPMbeGogIhAJ6kncqqRzCdgAyVAYuoFz3kKvONf66WACgHBBYt6TER","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":119613},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"8dcf44e60f890e0bf26c15e3d07dbca199e26356","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.16_1700057676116_0.33665693134891783","host":"s3://npm-registry-packages"}},"0.3.17":{"name":"react-streaming","version":"0.3.17","license":"MIT","_id":"react-streaming@0.3.17","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"a4b43c0b739d701306b311657af8dfba9b377a9b","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.17.tgz","fileCount":133,"integrity":"sha512-ZBYI+9+n42wS4HltYOBBasD4qK27HoJcwneiptBcC/ucJeY++aX4MccU3l/Qc3vYCA1QovF7QusHVug8SqMPfg==","signatures":[{"sig":"MEQCICeIVAbO87VoNsfUq+SXmQ1AKDmjVTwOyu7w4kgsuu+HAiBjTdhYTMeNzRAoySxtOdbyQ1xuj/QQcyQ+447WxtwWKA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120540},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"97809b4ceec9048456cb2a5a8b5e6dbb911ab4ed","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.17_1701971202499_0.18305534198078277","host":"s3://npm-registry-packages"}},"0.3.18":{"name":"react-streaming","version":"0.3.18","license":"MIT","_id":"react-streaming@0.3.18","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"e9af8ccd32aef955c27391f5b35aab0ca6c1ddc2","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.18.tgz","fileCount":133,"integrity":"sha512-4qugTyVx0r1i/o+PzrcqwThqLgjNdqNgzCYnIFASImSB9yPkhUqFIKyLXm6sQIcZ8gu2E2xdSvCdikfmVYER5g==","signatures":[{"sig":"MEUCIAq72jF7MPSvNmgxqJs4V99vBobfWwo2YDjXIZ5HhdEHAiEA8oTdBAEIV6ADx3jb/40RAj3W1Pg+jqU5+tHTqOrYpS8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120634},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"75ee17a4016cdc3cf95afe1955a8333d18270590","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.18_1702310606749_0.38999006495972455","host":"s3://npm-registry-packages"}},"0.3.19":{"name":"react-streaming","version":"0.3.19","license":"MIT","_id":"react-streaming@0.3.19","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"41275bfbf8383565653826d9a9f5fe2a44dfd5db","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.19.tgz","fileCount":133,"integrity":"sha512-kpxnj/nynMbdVVLUZKAI+AlSx7bJNX0WZO14LSJNtfIcbQJd7YH0ilnP+AFwKkvrjuG8zuNL36W5WCsczM62zg==","signatures":[{"sig":"MEQCIH5jIVkom7wHCVV054OaUC45jaAarCoembG7VwvceZwhAiBVO4YxgHdjxhImXCfeRdRS0Pag2Ni+Ss79kCMMfNbXGQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":120434},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"7526504f568566bb8a9b81b4934be69877589790","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.19_1704551563185_0.5970621770835327","host":"s3://npm-registry-packages"}},"0.3.19-commit-20b3bc7":{"name":"react-streaming","version":"0.3.19-commit-20b3bc7","license":"MIT","_id":"react-streaming@0.3.19-commit-20b3bc7","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"1ca910eb27d08cdcc64692671f72f61f34fb5074","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.19-commit-20b3bc7.tgz","fileCount":149,"integrity":"sha512-tL+Xwi+JE25igb4ivqXfeB0A7Em7r0jiuQM4iA3r6rZBQUZWD2r3QI2aEypo5Vtuj8znE5isnLXc8IGYJruhjg==","signatures":[{"sig":"MEYCIQCe39hHDkE7fXffCV6wvEtkMaOiDvtNz1ZBKK5A9FuJaQIhAIsUmTvbAq0PyOlsL/LR3Af/P4EJP0SGvk0Zzvo45LaX","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":127540},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- [Get Started](#get-started)\n  - [Options](#options)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- [Get Started (Library Authors)](#get-started-library-authors)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Coudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on the Edge (.e.g. Coudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google ranks your website higher because the initial HTTP response is faster. (To be researched.)\n    - Con: Google will likely not wait for the whole HTML, and therefore not see it. (To be tested.)\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP User-Agent request header. (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: Use Web Streams instead of Node.js Streams in Node.js. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errros occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side.\n// The data fetched while SSR is automatically passed and re-used on the client for hydration.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Get Started (Library Authors)\n\n`react-streaming` enables you to suspend React rendering and await something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side, as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between three methods:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // `useAsync()` suspends rendering until the promise returned by `someAsyncFunc()` resolves.\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.node.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"20b3bc7129a036dd4bd80374e06c3d62d2d7c4ff","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.19-commit-20b3bc7_1706805401277_0.174864666678338","host":"s3://npm-registry-packages"}},"0.3.20":{"name":"react-streaming","version":"0.3.20","license":"MIT","_id":"react-streaming@0.3.20","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"50e2d51b5acc70a2d9b3b94ce466a8a47894cc19","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.20.tgz","fileCount":145,"integrity":"sha512-+OQzuLLxhpoFRp5DEO0/eXNbBMDfqLrUdPD0uJ66N7LX4ypYHpXUfmPBjzthrI077Q76VtXEXpaTbgUPs2nPfg==","signatures":[{"sig":"MEYCIQDstMTy41DK7tHOQ9QnqOWUMx0ZSBr2q23+Otkn+nZKpwIhAKIZN8kgX95N8qblIoYXdv7ivAkTTHY05/TVb6V8iz/b","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":125175},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.node.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"c7a07840243db256a674ccab8b6199705658aa22","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.20_1706815313798_0.3539104174254857","host":"s3://npm-registry-packages"}},"0.3.21":{"name":"react-streaming","version":"0.3.21","license":"MIT","_id":"react-streaming@0.3.21","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"ec7760e7d16d1be3f2430ba5ff572a8910a06564","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.21.tgz","fileCount":145,"integrity":"sha512-3FMPDmK73f8oTjvzCnAxMcpQOXellTYAykwf4PVMbrWPGsut5hxaDP2lT6WDhlafZyZzTIAnDwUCViq/+7Jtmw==","signatures":[{"sig":"MEUCIQDFXlZbD5tZx0p3DPsdFKmGDZImd9qTIfn7D/ESeD78aQIgL+Ow59VY82podGjl1dPzqTCw/aWWgTE7X6v8UI7LPzk=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":125383},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.js","node":"./dist/cjs/server/index.node.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.js","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"3cdeef052fae137ddd13d47da0c226c2c836a909","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.21_1707550575161_0.8143472468932811","host":"s3://npm-registry-packages"}},"0.3.22":{"name":"react-streaming","version":"0.3.22","license":"MIT","_id":"react-streaming@0.3.22","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"cddc830810f8d3c2e9c77be5c34c41dbaa39689f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.22.tgz","fileCount":153,"integrity":"sha512-8kFMtAZQ1oUVnVKJvBqy/DUl1ZjoaRDe/v6GuYQWN4OX4K8jnmDt1NBuQxcjKob26+9Wx618km4m+/Q7PmAPfw==","signatures":[{"sig":"MEUCIQC71/+1f7tW/Iubof7KugSm2ZE0IWPSdzokMx5UhFbmKgIgXX6sq95++0VEYUG6OPiHiFVP5JekSJUbVShXzKEPQgg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":130053},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"628677cacf8e604b789037ac66d9b31fea81dc64","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.22_1707553100738_0.10126951954356178","host":"s3://npm-registry-packages"}},"0.3.23":{"name":"react-streaming","version":"0.3.23","license":"MIT","_id":"react-streaming@0.3.23","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"b9626a20f16e55fb65bed7f030f5adb28d02b6dd","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.23.tgz","fileCount":153,"integrity":"sha512-mnnVhyLlIFGZEPSLAOA2ONyhAnOTcVayO6Rgbig0AGnvOESrTv2ZfoPmad6wdJreQzhY8LL8dECQlgiOQIV/5g==","signatures":[{"sig":"MEQCIQD8EaveRwDi9f061J0wVqufkpFe1Qbh30kOwF1ZqByubgIfRma7LxvoZsOjtSmOi4nCSHrD5Of1hrjxF6fpDFjgdw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":132444},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"479ad2c1cc0dfb3e4f1976bce909a78526ac03e8","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"9.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"18.15.0","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.23_1708771966922_0.48140864780826487","host":"s3://npm-registry-packages"}},"0.3.24":{"name":"react-streaming","version":"0.3.24","license":"MIT","_id":"react-streaming@0.3.24","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"3a4d98afeeb78a31391def3d06828f1118523be1","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.24.tgz","fileCount":153,"integrity":"sha512-sKqhgFJswZR3yFDmtwKYVZMJB7nkjQ0r4BHEQTZHLQzM5Ro8Bv4F/kgygdYfivncOu+H6apUugK2bL/WB7z5qQ==","signatures":[{"sig":"MEUCIEM71dUoB8FHEhogIsFEwK8dv+b/Xs5htUfdZ4Za2yMkAiEAuhoyM2rAhZvvvlPdTIuCjzY5BXGVIAzg6ECegU33uIY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":136038},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"bbedee4426392014e8cf3a5527f3ea74808773cc","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","// === Build ===":"","// === Release ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.6"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.24_1709931871240_0.04660291501411895","host":"s3://npm-registry-packages"}},"0.3.25":{"name":"react-streaming","version":"0.3.25","license":"MIT","_id":"react-streaming@0.3.25","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"a30a37f11926696b840b000b4fd42697577d469d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.25.tgz","fileCount":157,"integrity":"sha512-RfiC1+mEgO6FMNFo5k77TRouXP8Vzj45tUAJRWUbQqPnPnvQSDc1FFkxNJ3LkR4AUdMVxZ+tC/gofjV0A3SW3A==","signatures":[{"sig":"MEUCIQDPieVZhaDb0EMdhdLrxUIy9mHtr/NB97hvwcHlA4Q3UAIgALUnVPMd/CvgTjYZKSLU/MlbnUKiF5RBiUwRkCf/tfQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":138591},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"d89418c352b8ae50dd6964e7de1a694b28f657c5","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","preinstall":"npx only-allow pnpm","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","========= Only allow pnpm; forbid yarn & npm":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"packageManager":"pnpm@8.15.4","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.14"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.25_1713299720905_0.14474224925813206","host":"s3://npm-registry-packages"}},"0.3.26":{"name":"react-streaming","version":"0.3.26","license":"MIT","_id":"react-streaming@0.3.26","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0311f2942b47c2524f26e20e582cbb52772403f2","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.26.tgz","fileCount":157,"integrity":"sha512-BP0HjhrCi4wTSn2IF7qF2PHFyxCp7Nz/GJFnHKr2sR7i+KALdmh6b/qqIQLlUEBCHD16ZUVj7XQRz42SgN/SJw==","signatures":[{"sig":"MEUCIQCknTSPQ7q8JhPyqVRhIICSW2umAl29u5If4w+emDXNmgIgKMe1ReRvJDjidnu4mrM97BIhWcfYDNmxgf5PRykFhfg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":138221},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"c9c48d16bf3da126a2f6e83905b8270cf871d42f","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","preinstall":"npx only-allow pnpm","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","========= Only allow pnpm; forbid yarn & npm":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"packageManager":"pnpm@8.15.4","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.14"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.26_1713344152355_0.04126795331639577","host":"s3://npm-registry-packages"}},"0.3.27":{"name":"react-streaming","version":"0.3.27","license":"MIT","_id":"react-streaming@0.3.27","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"cd3b0170ced2ef562356b1bf185525543fba6a63","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.27.tgz","fileCount":157,"integrity":"sha512-pXB8pk3lhR15Rx2u4Yo8gbLFDeSYy2g4QjcckbX4ICPd6LZVTJTbq9UUngNQrws8SrXSMMjDYUu+ESt63TRveQ==","signatures":[{"sig":"MEYCIQD4jlBOJSWzdugmoXyHgqyK/3Eqc8ng7HrBnRv5lAzlLAIhAOkytyJjytvrFOIEKCzigf246mRyuWfaqmgORTekotVt","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":139941},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"2e89de48ed7a49228d7e44ffbb1769e80fc4ae91","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","preinstall":"npx only-allow pnpm","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","========= Only allow pnpm; forbid yarn & npm":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"packageManager":"pnpm@8.15.4","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.1.14"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.27_1713438774307_0.6933088067087836","host":"s3://npm-registry-packages"}},"0.3.28":{"name":"react-streaming","version":"0.3.28","license":"MIT","_id":"react-streaming@0.3.28","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"b36176f6dac7d8de28e894c05fa43951cfdbc49a","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.28.tgz","fileCount":157,"integrity":"sha512-N5Nzwer/XGzCyVrBnU5bOhx2QESH1+jbbTy8jxsU7qe9XqsQDp7Uq+0VQiW6mWnPeBB7vTdaj2B8VG2VwCUO3A==","signatures":[{"sig":"MEUCIBuZCkKogwxIt0YsTTXM++57m+yr9hG8bSalpgoG9x4sAiEApOUA8WvvbvwPar69QBMLDwTtJLcxbotpDzNv40J0sfw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":139843},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"f858f07c29885094562d73e3f315ad1581ea9ba5","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"packageManager":"pnpm@8.15.4","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.2.2"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.28_1713513043133_0.2851157684155974","host":"s3://npm-registry-packages"}},"0.3.29":{"name":"react-streaming","version":"0.3.29","license":"MIT","_id":"react-streaming@0.3.29","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"15cc50e9a407abc1b9c01ab0b79e63df0abfecd0","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.29.tgz","fileCount":157,"integrity":"sha512-5fvAymNm6/slSHHTA6l9ww/+VCj2nC5YU72p8bQeMELdkawvsx2WQL9GgtfZlIhODTAbxJkwBMHvmcnQ5Qie1g==","signatures":[{"sig":"MEYCIQC12pPdPHMFv7tu5fr/ARbkSDq4wkqnZKdSI6KM9rp/5AIhALcmt++aanNtAhE1HiTiY81ZNmPMXAIszk/hPeEsY8F8","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":141856},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"61e57b22b8f7d0f3d1d3f0abb903b6d6e266b8fb","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.29_1719479840637_0.36076125161453976","host":"s3://npm-registry-packages"}},"0.3.30":{"name":"react-streaming","version":"0.3.30","license":"MIT","_id":"react-streaming@0.3.30","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"5c7d87c8045a6f8264075d6f69e2f6ad79f6a91e","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.30.tgz","fileCount":157,"integrity":"sha512-feIMuRasiyZ15Unx26Bu/dCZZj7lHwDwxh9o8nAf2U1jidT3NBEGsAnM22iqgq+kPbAbCeyNKneJi8M2BGwaRA==","signatures":[{"sig":"MEUCIQDxOhNiqqpBCvNaUzldAW7Kh1aninxTXr8IG1pnMv+R6AIgLPu253j7oM7v0YHhA6EM292seXHoAJUnaK7SGE8X1ss=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143050},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"53f2a69b4b75c093b0bf7bd0240057b906d9b454","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.30_1719524987111_0.10299035635522746","host":"s3://npm-registry-packages"}},"0.3.31":{"name":"react-streaming","version":"0.3.31","license":"MIT","_id":"react-streaming@0.3.31","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"8f40abc8aa4d6301945d175afc580b3f953ae452","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.31.tgz","fileCount":157,"integrity":"sha512-HCDsJJ4tr+Yi/A2gRDZ2dnsXBdG/SNacco3sJHmgh121r9RSovdcP6HTLYBf6g5T49+enZNq6A0cf6QIRuQ4CQ==","signatures":[{"sig":"MEUCIQDP5D0TRm6nWCcUR8BgSZdBbvwROouCrBTkFhYJGAamggIgFW9qu4XO5H2KWcOoBF/Y5RmzexCHsKn+TBQxmHNwew8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143070},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"f7ef973e436edcdc6d26e35dfb0e0e48880ade4a","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.31_1719526532735_0.8448937587514871","host":"s3://npm-registry-packages"}},"0.3.32":{"name":"react-streaming","version":"0.3.32","license":"MIT","_id":"react-streaming@0.3.32","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c5b9b61bebbce33ef2920678768a0ba49e1d0037","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.32.tgz","fileCount":157,"integrity":"sha512-t+VlMlbErzSFg2e9hhqc7FLLZjLMDjdlHPI5oKMCk/lLnh7TvB1ZSDtylZLx0lEED7nOXMUKFLCeuUrrPuhykQ==","signatures":[{"sig":"MEUCIQD96l1kMBFrerOXPHuoEIlY/iZVfBbLmBfTrZc9kwt4+gIgXZyotgSm7rMjKDRsCAdo8J35QQHLPuzhJOK22sIjc1I=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143994},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"4d67dc88e02f710995033cc9e854cb6b2ead765f","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.32_1719564549772_0.4615624252725934","host":"s3://npm-registry-packages"}},"0.3.32-commit-91eaf97":{"name":"react-streaming","version":"0.3.32-commit-91eaf97","license":"MIT","_id":"react-streaming@0.3.32-commit-91eaf97","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"e01127126cf53f5908d5f1087fae1992f44ad0a3","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.32-commit-91eaf97.tgz","fileCount":157,"integrity":"sha512-xDjQMW/hC54N0SPqk938cKb1zTGnvU9kYAABerZajyO2bsUfWGQxhjq3Vtpr9jnW6/b/l2MVi/76yiNygcnzmg==","signatures":[{"sig":"MEUCIQCXkQr91I15zBTNElhYjYAHulP7v3L40I01BPCUddU+hQIgLXjawyN12u95USHd52yzk8w2bFsjJcdQ4CsrmxSi6hY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144133},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"91eaf9778aca8302f934985a05ee1488c9a231d8","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.32-commit-91eaf97_1719568099878_0.27698470299253675","host":"s3://npm-registry-packages"}},"0.3.33":{"name":"react-streaming","version":"0.3.33","license":"MIT","_id":"react-streaming@0.3.33","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"50ca71889e32780ecbda491a7ba2ebee2043a1d3","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33.tgz","fileCount":157,"integrity":"sha512-Yb6ZgYRRMM4h7nA+vmW72wHJW8OyXg1TmSj9S+mmX144tOemfzAZ51cAz7NCWvkyHwI1o8KC8rpXSuGPajQ4Cw==","signatures":[{"sig":"MEUCIEeJ0rOQdhkfZDp4D+EJAzpeQfGgVmEXD19yWpc3pzFEAiEA2BF6zjD0XyKTBjW7aO5cIWdKBj2b61Klmqxb2mGJwzk=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144088},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"eaa6888d3dc5b3074bb50a1d0c9e3b6b3760d914","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.2.4","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.11.1","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33_1719571083842_0.21811350174522492","host":"s3://npm-registry-packages"}},"0.3.33-commit-2cf1712":{"name":"react-streaming","version":"0.3.33-commit-2cf1712","license":"MIT","_id":"react-streaming@0.3.33-commit-2cf1712","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"ab8a61cada8ad71dafc94050967816a914f2d99f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-2cf1712.tgz","fileCount":157,"integrity":"sha512-rGj7BCzCU3C3hMwUfIv68O5Tgx+wLT7aXLvPJFr9nk9sRA/0T5HCC8gTBLzlMU1DZT5caGw//eOkjG+lzmvdzw==","signatures":[{"sig":"MEYCIQD0SlCAKLEGrM7MojGemfBjFVl1V/a6vIEH0TPtoMVYTQIhAJTbDa8Di7dCsM7Sv9jfAh9/gZEP3KrJIdO1iZi20QCp","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":143149},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"2cf1712af4b528262c7d4890333c09c14082c5d1","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-2cf1712_1719929258527_0.09633568334703235","host":"s3://npm-registry-packages"}},"0.3.33-commit-cf9cdf3":{"name":"react-streaming","version":"0.3.33-commit-cf9cdf3","license":"MIT","_id":"react-streaming@0.3.33-commit-cf9cdf3","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"439ec024ea19370344f13a637dc2264d986b1ab0","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-cf9cdf3.tgz","fileCount":157,"integrity":"sha512-nKfEwsyC0AOWmZirBKrNdavVU7VUpWIrizynCD8iylx3g0UyS5FQ3Py+qecRcDEHsyHqX/KzYk5rvalHYi10uw==","signatures":[{"sig":"MEQCID/3ZDOIzfMVHF45cXfkTKJTG79g+1qMy7R49bK6rMxaAiAIaFYu7T3MVRr8e9IEczKdUJKade929eZ6xffysDm4dw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144617},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"cf9cdf39bb85011c58d6f55d0abf5eec83430b5f","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-cf9cdf3_1719932780790_0.12278568896851638","host":"s3://npm-registry-packages"}},"0.3.33-commit-914f21d":{"name":"react-streaming","version":"0.3.33-commit-914f21d","license":"MIT","_id":"react-streaming@0.3.33-commit-914f21d","homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"dacf21c56b1d3754407c4d3499e5df4c7ce5714d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-914f21d.tgz","fileCount":157,"integrity":"sha512-PMTKToC2JrcMFDNZOEzTsXIOmZOvVaPz69oSctbMlgQquAr17G7vJU7Ay/DwwVaI2P7NDi8Cxg8HPA5sd3pjJA==","signatures":[{"sig":"MEUCIQDXLvDpq4fJZunv/1k3CeOzwMK0HmtXnFvIALx6yHkbSAIgH+ET/jqKI7TD/Ebir5znLGqyv6o0QDedEs39ZaPO5YU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":144959},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"914f21d1734613d99e6556d9e2d99efaf40ebabf","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-914f21d_1719934349167_0.09088374675231181","host":"s3://npm-registry-packages"}},"0.3.33-commit-485ed46":{"name":"react-streaming","version":"0.3.33-commit-485ed46","license":"MIT","_id":"react-streaming@0.3.33-commit-485ed46","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"1ed38f5e52b024c24b11415e93e5980bfc393597","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-485ed46.tgz","fileCount":157,"integrity":"sha512-Uiy5fbcXkeA38jeOE5BmKQccM5V+E+VvW9fZesegSeYSdtSDpnQoio8gingRsUsNmZLPscRUyo0Y+H7/wZdScA==","signatures":[{"sig":"MEQCIDcxIR26Vn6sHUTt9K/tkk9Lno/zpo3K/OS9rX52jFuBAiAdpzsGQEpTCmnruPHWBOqFOLaEa9meOYAPTXwpBSYaSA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145005},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"485ed46c87f7a0fcbb1c6e3e2d1b43767b851beb","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-485ed46_1719938394739_0.8014294275685132","host":"s3://npm-registry-packages"}},"0.3.33-commit-bf88931":{"name":"react-streaming","version":"0.3.33-commit-bf88931","license":"MIT","_id":"react-streaming@0.3.33-commit-bf88931","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"de2bb1e06d05f5274746901bf0976fa3b4b01c38","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-bf88931.tgz","fileCount":157,"integrity":"sha512-ev0Mas+hDRtPdBKx29SaN+C6w6KpdBRJDFsm8BbdqQfweiENyvO8phQTzun1hU1YccPn6VKnDTcDynaotsTbfA==","signatures":[{"sig":"MEYCIQCiaKxDVLvZKJU/el9fnAslo0IUKL6KRkANNa9aa3m+TQIhANWhjbMKyk/2lnUOpmbsc/FdljoXVl1yYCzRXatAhA7B","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145467},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"bf88931f0f51ff285599cb2ff02c51061b190315","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-bf88931_1719938410611_0.03112507134314013","host":"s3://npm-registry-packages"}},"0.3.33-commit-e4365ee":{"name":"react-streaming","version":"0.3.33-commit-e4365ee","license":"MIT","_id":"react-streaming@0.3.33-commit-e4365ee","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f386066bddb614bc35ec98fa57d304db1db8925b","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-e4365ee.tgz","fileCount":157,"integrity":"sha512-cNP2cO1M3w/EkgLeapzda7rsdcdYaLvwBtnlwCcgREPvCCOCLKKZ4Mo6TLm1uVvAAEHSvFHamogGWtX8IpyICA==","signatures":[{"sig":"MEQCIDTRm0AD0mzYFoIaFlXpGT9svgeWwDcOQASEWEQHrOzEAiAaqXveuOKznY/PWrVawy1hxx6JOVydc7vijXgr6cKiDA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145455},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"e4365ee75ece4aaf5609d733b8ded17d7bc8246f","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-e4365ee_1719944436622_0.5587786876020164","host":"s3://npm-registry-packages"}},"0.3.33-commit-a6da6e2":{"name":"react-streaming","version":"0.3.33-commit-a6da6e2","license":"MIT","_id":"react-streaming@0.3.33-commit-a6da6e2","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c256e2e4e9761356223720c60c539dbc20afc0a5","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-a6da6e2.tgz","fileCount":157,"integrity":"sha512-FZxfRKGJrdLe1eM7QTdYFYkwad6DsJ7FvJN21wNjjAJVm16s7guZQI6HSAPdOAUJRVT8gzV18ygGy9Rs7RulAQ==","signatures":[{"sig":"MEUCIQD1fPnZ62ncO9Bhaz3NPtuBoPj5kQ5XEEGMweBINyzUBQIgI+K6UTzD78yt6TANrq/L/K4wZhwbbbMDkM8afM9oSsQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":146019},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"a6da6e2cfc4e08aef252d433d0a2c101c22dcb43","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-a6da6e2_1719944732834_0.17185011457358468","host":"s3://npm-registry-packages"}},"0.3.33-commit-993864b":{"name":"react-streaming","version":"0.3.33-commit-993864b","license":"MIT","_id":"react-streaming@0.3.33-commit-993864b","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c238bcfec1d9fb56581776f82586390d2d017270","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-993864b.tgz","fileCount":157,"integrity":"sha512-5mJkTCOVi7GfkEnDDUMtfiYaC1wRvlSVrn73bHyHNpC8QMZS8wyznL7lxcwhKdYQPTxavhwwytXqjBOiWJLVCQ==","signatures":[{"sig":"MEYCIQCHLMsYCUqW3nM2Faa5qhozPOfbLnhxAOu1FHdFigqn6QIhALEcDZBv3iQYaCG3HNYMCviFXDBr3KoWG5CWN34a8c3k","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":146259},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"993864b63478b70958581d59f687a62522bc67bb","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-993864b_1719947448747_0.6931698037392222","host":"s3://npm-registry-packages"}},"0.3.33-commit-e580257":{"name":"react-streaming","version":"0.3.33-commit-e580257","license":"MIT","_id":"react-streaming@0.3.33-commit-e580257","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"5e4f62acb302173a077d186b587cb64f470187fd","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.33-commit-e580257.tgz","fileCount":157,"integrity":"sha512-5E3SF8PJ48DsEZOICdCnpCy3XgXYYDP/Z8r69DtTc79E0kvQWfJhUqvzOIrPAACTD2AurFYts+a/Dq6zLJpNXA==","signatures":[{"sig":"MEUCIDCquAJZsKic1pUGnEKCtaCchLbbFRZbmKwhwYViwoxoAiEAsnSZG6s2BKFIIApN0sBdgstcinFq22JJky/GrPsRxY4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":146323},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact 18 Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React 18 Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React 18 Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n`injectToStream(chunk: string | Buffer | unknown, options?: { flush?: boolean })` enables you to inject chunks to the current stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const { injectToStream } = await renderToStream(<Page />)\n    ```\n 2. With `useStream()`:\n    ```jsx\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"e580257f6d2df1c5bd3d7cec6c35a3d698bad6a7","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.33-commit-e580257_1719951192601_0.5882354014379734","host":"s3://npm-registry-packages"}},"0.3.34":{"name":"react-streaming","version":"0.3.34","license":"MIT","_id":"react-streaming@0.3.34","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f41da09a40d47da60a9e583d468c89d3b3988396","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.34.tgz","fileCount":157,"integrity":"sha512-ZaSRLt3w3Xe4OMorY1BSTedMwTRKMLObmwFI6ybnAt+vKI9u85EMtOV64F2Ade2vs3BlwiebtWy673ucMobx1A==","signatures":[{"sig":"MEYCIQDeSMQThAyXLnEje4+dJ+KZS2SA/hefRZ/Yr0m0HF1jWwIhAPV7H33bEPA1EaVOTkYGY1rz1k8askClt89KK0X7iOs5","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145524},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"29458e86003299b6254125256040767dabe09110","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.34_1719996351986_0.3045226283437794","host":"s3://npm-registry-packages"}},"0.3.35":{"name":"react-streaming","version":"0.3.35","license":"MIT","_id":"react-streaming@0.3.35","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"8a738aa1b5625bc15e8ec29c2576393ca2dee806","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.35.tgz","fileCount":157,"integrity":"sha512-R8rjdVK/WVx2S+UNqNRlW5W+IJ9nkcZi7+ngt4MUocN2d0ysdUmpoCzAi7ltHjchAhIHjVVJ6U4OMs3AcyF2Ew==","signatures":[{"sig":"MEUCIQClRIx70Lld9YymZjwmeOt+EllPyJKz6ghihWEv60kanAIgYIo7qDeCTMgIKJ/BaFAHpzzYn6eQ66ZjEE8H0G04yFU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":145562},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"3ecd0ec90898dc29108a9239376a90321df88fa2","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.35_1719996402818_0.2597487308452706","host":"s3://npm-registry-packages"}},"0.3.36":{"name":"react-streaming","version":"0.3.36","license":"MIT","_id":"react-streaming@0.3.36","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0a2b743f01dc02a4130d786ffc774f831d9a1197","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.36.tgz","fileCount":157,"integrity":"sha512-2RtP25lSHpyQ5Yv7Fh4S0r45wTK0+8Z9e42dtVZjJD9/c9FXRAUoWbiICvqD35vfkaxQ5mo8hJty2BraZv/wfg==","signatures":[{"sig":"MEYCIQDYf9PX5/jygNMiIT5OQopWNNfnUXvHZkOxQKO1EY70yAIhAIlba2OLzr6l/NEjm5x+5As1eImnKhR3EesTIOCasEnZ","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":149616},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"6a43dd20c27fb5d751dca41466b06ee3f4f35462","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.36_1720008896651_0.6350074456595403","host":"s3://npm-registry-packages"}},"0.3.37":{"name":"react-streaming","version":"0.3.37","license":"MIT","_id":"react-streaming@0.3.37","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"ea678619f4d8a1a6b4fd5519ea480c3f8482661e","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.37.tgz","fileCount":157,"integrity":"sha512-DPYfmyDZsjSJX0jc27bCAWbKR3z1Bh5olu6kDkL8ghL2cg55MtojicDh4Xpn3OwpWIS5RxVX/ss99/pOkAOfIg==","signatures":[{"sig":"MEYCIQDbQ4q9Oryp8P7k8t70POrZtuiwjvJ6WzuLKQLK1vuyIwIhAJyZwVqvb+pXURJ9qkZA7rIqQ4AsWgdjO2YoNE0O1sPA","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":149536},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"026bd1f0c9d7eaaf63fd794ba21861568835d138","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.37_1720032013643_0.2118876263708318","host":"s3://npm-registry-packages"}},"0.3.38":{"name":"react-streaming","version":"0.3.38","license":"MIT","_id":"react-streaming@0.3.38","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f5c40130e9675d08b18687dd1a553a85d8f68c2d","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.38.tgz","fileCount":157,"integrity":"sha512-ypk9ksJXyJ6t+PGlHzUKZGJOjh5Anbk7j/Ien7SuuC/tN22EpxCZMmdzPjunl0Zv6ZYMtNJqTUWF+fb21OeNIA==","signatures":[{"sig":"MEYCIQDgu4Pqhvh4yf8yCV6PVCnUiDDQQcHPM+ZDvMa/GxQpOgIhALNiCzBMFh0bG6NmuVfXht8KyuIpWCcsvSMWtUvprJhw","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":149646},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"b20651f0b884c7cdbc96517ccf3c69f206dcba70","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.38_1720083888532_0.5350707659010141","host":"s3://npm-registry-packages"}},"0.3.39":{"name":"react-streaming","version":"0.3.39","license":"MIT","_id":"react-streaming@0.3.39","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"c212b6b82081666658131f214bc2c5d58815eff5","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.39.tgz","fileCount":157,"integrity":"sha512-QBLLWT7Ndw13dWow1jdMOQKrmQesb7Y05m3P0qnwFFpHYAyvJ/GOeQLJboBIOhgh2kaQ9GgI1nyzMvp7+kj8JQ==","signatures":[{"sig":"MEUCIQCQ/v6fjDHWS9qFZNP7w2TazLbu1NTRz7So7MIo4DHuHQIgHKNNj3ea4/2EF6WC9Qb3RtsscEt+NtHz5gdL2PoHevI=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":150085},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"f079c8fcae554c19a280ebac109ff6ae850f9fee","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.39_1720087146131_0.6782490255154532","host":"s3://npm-registry-packages"}},"0.3.40":{"name":"react-streaming","version":"0.3.40","license":"MIT","_id":"react-streaming@0.3.40","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"f60a31f49422b0a2e1dbfdb2c2357aeb27582970","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40.tgz","fileCount":157,"integrity":"sha512-37vMjhLnp6WBIZn+ZBJIq2pdfBqN6++j/4S2iwQg0sSQIPdQZNDFGk1CWzb4X3dHiQXvZ6LYZrAyRsGOl0Tfyw==","signatures":[{"sig":"MEUCIQD73KaV70akDWB0rfdP/V4zgcZJxw7ePHtj0kZoySLd1wIgYHhPKY6erhxzvBC2hBENiXGlSWl3DbhoZZdZtspTVdE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":150295},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"0849a97955c1dbeba4664dbbb627cf9bef73d6cc","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40_1720090030327_0.8110440886683956","host":"s3://npm-registry-packages"}},"0.3.40-commit-30e9b4d":{"name":"react-streaming","version":"0.3.40-commit-30e9b4d","license":"MIT","_id":"react-streaming@0.3.40-commit-30e9b4d","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"7c8bef1feaad91ecf4d5215b2044c22c4c32363f","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40-commit-30e9b4d.tgz","fileCount":157,"integrity":"sha512-qtcxIy8aS+rGmL3d05SHTKkotG81oh6xt/I7ndQNDCH9TQdehdrhaq6xhmeSg5/GMoTCRFWicPeftzsLhR6yww==","signatures":[{"sig":"MEQCID5TJSi4iWeMiwzP94qWOSCXmH3Z4GoO31T0VUGTyjrUAiAlNN1LDMop3pIXnuNJ5SI6DX91JeYH9feClA5xvdYsJA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":149365},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"30e9b4dd6bb39adbd09088b0b90b65da53cb9465","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40-commit-30e9b4d_1720172047728_0.5470105064246578","host":"s3://npm-registry-packages"}},"0.3.40-commit-2aa5c83":{"name":"react-streaming","version":"0.3.40-commit-2aa5c83","license":"MIT","_id":"react-streaming@0.3.40-commit-2aa5c83","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"96a11f3d3c159071414770b8ff7cf5e77ba0c2fe","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40-commit-2aa5c83.tgz","fileCount":157,"integrity":"sha512-rMXAI4A3sCMSI9XVePoEpQSrexL/HZsxEHKOj6KOwf5pyNQ9mAI3cjiU66ZUTXyt8gYb4zLPWN3W1qXQsJSwVw==","signatures":[{"sig":"MEQCIDzCK4SPgcfgTShrBYlGBfDNuUvdvIwsHRLh9XQN5dEfAiAT9b4MI2rpKJz5kXti2GuwqIsIuYfFW33151ReDD1wmQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":151070},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"2aa5c834ee2c1897cddc0285f55f7e8efe001ef2","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40-commit-2aa5c83_1720178399593_0.8977433304823832","host":"s3://npm-registry-packages"}},"0.3.40-commit-1854445":{"name":"react-streaming","version":"0.3.40-commit-1854445","license":"MIT","_id":"react-streaming@0.3.40-commit-1854445","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"cebc7bf54d0c1417e713dc0cdaf0b0f9ad408e79","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40-commit-1854445.tgz","fileCount":157,"integrity":"sha512-+jCjzDzeG67m8retI43udunWu/S6ntl0XoidLFiZHp2koX5Y2H5EYQEcc/dQZYTJB8idQh9FWifdcxXYk0JR/Q==","signatures":[{"sig":"MEQCIFQzJv6a9YY3/bgzHypLM0LBvLQRguEPP/oHvjuF60TOAiAPo/Xd26/SJfwZ3s/d/A+1JbsF2ep45zd2CA0u4h3k+A==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":151496},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"18544456556ffa9e3e2cdd6e29a20c8e72530414","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","// === Release ===":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40-commit-1854445_1720180419304_0.25495409115133816","host":"s3://npm-registry-packages"}},"0.3.40-commit-195bab7":{"name":"react-streaming","version":"0.3.40-commit-195bab7","license":"MIT","_id":"react-streaming@0.3.40-commit-195bab7","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"d94d5b1995fdf98510be982001a14e30ff01de62","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40-commit-195bab7.tgz","fileCount":157,"integrity":"sha512-YItqZAoyg8C8nStM6+oGVcwfZ8Jg6ZXX5Xy6VUEihQ6YXiC2M48vG93DPiSHen/mYj+BBuaLzHVX1vuG3IQZXg==","signatures":[{"sig":"MEUCICPiY6Y4ElZevPklCRZYJABVwG/RhqmroBTN1rQr4F0tAiEA5QNI9zk2qpsMDdBTbV+PEvo5YBcka/3P15NCcP8oIXE=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":151343},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"195bab75c1e59689549a60d753d1300dca5e10bb","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","reset":"git clean -Xdf && pnpm install && pnpm run build","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","========= Reset":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","========= Release":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40-commit-195bab7_1720185962677_0.7909722920033149","host":"s3://npm-registry-packages"}},"0.3.40-commit-d57fb4f":{"name":"react-streaming","version":"0.3.40-commit-d57fb4f","license":"MIT","_id":"react-streaming@0.3.40-commit-d57fb4f","maintainers":[{"name":"brillout","email":"npm@brillout.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"0cbfed17b5ccc45bc21e43b5688263d375fcf4b9","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.40-commit-d57fb4f.tgz","fileCount":157,"integrity":"sha512-o0+k+VO92Rnw1TQZbQbtOk3XYo3UErUFxl2uBiZO0BLSSRh68cyvG05c3ftuL0mrNlgY1TlT4qvf1tz4HJMVAw==","signatures":[{"sig":"MEQCIGIROEmZxbb/NUKOphnFpFf4TLT2jH0Ew+h1wCU1etzeAiBip5TTiPEJrRMEfVqqmaIrvWlZWjRbGj4cy2+fkYpS4Q==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":151347},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"d57fb4f69d72bded498c7b330caba5506c4d207b","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","reset":"git clean -Xdf && pnpm install && pnpm run build","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","========= Reset":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","========= Release":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.40-commit-d57fb4f_1720186703646_0.5013078071554045","host":"s3://npm-registry-packages"}},"0.3.41":{"name":"react-streaming","version":"0.3.41","license":"MIT","_id":"react-streaming@0.3.41","maintainers":[{"name":"brillout","email":"npm@brillout.com"},{"name":"nitedani","email":"nitedani@gmail.com"}],"homepage":"https://github.com/brillout/react-streaming#readme","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"dist":{"shasum":"876f80a18c4334f9abd1df95c25c953bcc3877b6","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.41.tgz","fileCount":157,"integrity":"sha512-ALLhB32V9rjU+LjIwzDBXNuUyJRmyY6sT+yCApssXt7Azm8OxOcEq8Z5qckzWtUWHM7SK2e7dvOFiVsqnGRbxw==","signatures":[{"sig":"MEUCIAWXvxwzAw2eYt1vdQjZ9evHW2VYaYfSKS7JOTe+OkA0AiEAq7VUb14wgiiHt5vzbBJV7ar+BcQevHzn0ZJKE593HKw=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":151302},"main":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","exports":{".":{"deno":"./dist/esm/server/hooks.js","node":"./dist/cjs/server/hooks.js","types":"./dist/cjs/server/hooks.d.ts","worker":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js"},"./server":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.node-and-web.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.web":{"deno":"./dist/esm/server/index.web-only.js","node":"./dist/cjs/server/index.web-only.js","types":"./dist/cjs/server/index.d.ts","worker":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","types":"./dist/cjs/server/index.d.ts","browser":"./dist/esm/server/client-poison-pill.js"}},"gitHead":"62cc64fbc1553f7d9d696de17c5b12a0c3ddfe64","scripts":{"dev":"pnpm run dev:cjs & pnpm run dev:esm","test":"vitest","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","clean":"rm -rf dist/","reset":"git clean -Xdf && pnpm install && pnpm run build","start":"node server.js","format":"pnpm run format:biome","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","release":"release-me patch","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","// === Dev ===":"","release:commit":"release-me commit","// === Test ===":"","========= Reset":"","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","// === Build ===":"","========= Release":"","========= Formatting":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":""},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"repository":{"url":"git+https://github.com/brillout/react-streaming.git","type":"git"},"_npmVersion":"10.5.0","description":"React 18 Streaming. Full-fledged & Easy.","directories":{},"_nodeVersion":"20.12.2","dependencies":{"isbot-fast":"1.2.0","@brillout/import":"^0.2.3","@brillout/picocolors":"^1.0.11","@brillout/json-serializer":"^0.5.1"},"_hasShrinkwrap":false,"devDependencies":{"react":"18.2.0","vitest":"^0.14.1","prettier":"^3.2.5","react-dom":"18.2.0","typescript":"^4.8.3","@types/node":"^15.12.2","@types/react":"^18.0.9","@biomejs/biome":"^1.7.0","@types/react-dom":"^18.2.4","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8"},"peerDependencies":{"react":">=18","react-dom":">=18"},"_npmOperationalInternal":{"tmp":"tmp/react-streaming_0.3.41_1720279937317_0.6498019321884945","host":"s3://npm-registry-packages"}},"0.3.42":{"name":"react-streaming","description":"React 18 Streaming. Full-fledged & Easy.","version":"0.3.42","peerDependencies":{"react":">=18","react-dom":">=18"},"dependencies":{"@brillout/import":"^0.2.3","@brillout/json-serializer":"^0.5.1","@brillout/picocolors":"^1.0.11","isbot-fast":"1.2.0"},"main":"./dist/cjs/server/hooks.js","exports":{".":{"node":"./dist/cjs/server/hooks.js","worker":"./dist/esm/server/hooks.js","deno":"./dist/esm/server/hooks.js","browser":"./dist/esm/client/hooks.js","types":"./dist/cjs/server/hooks.d.ts"},"./server":{"node":"./dist/cjs/server/index.node-and-web.js","worker":"./dist/esm/server/index.web-only.js","deno":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js","types":"./dist/cjs/server/index.d.ts"},"./server.web":{"node":"./dist/cjs/server/index.web-only.js","worker":"./dist/esm/server/index.web-only.js","deno":"./dist/esm/server/index.web-only.js","browser":"./dist/esm/server/client-poison-pill.js","types":"./dist/cjs/server/index.d.ts"},"./server.node":{"node":"./dist/cjs/server/index.node-only.js","browser":"./dist/esm/server/client-poison-pill.js","types":"./dist/cjs/server/index.d.ts"}},"scripts":{"// === Test ===":"","// Make sure to run `pnpm run build` or `pnpm run dev` before running `pnpm run test`":"","test":"vitest","// === Dev ===":"","dev":"pnpm run dev:cjs & pnpm run dev:esm","dev:cjs":"tsc --project ./tsconfig.cjs.json --incremental --watch","dev:esm":"tsc --project ./tsconfig.esm.json --incremental --watch","// === Build ===":"","build":"pnpm run clean && pnpm run build:cjs && pnpm run build:esm","build:cjs":"tsc --project ./tsconfig.cjs.json","build:esm":"tsc --project ./tsconfig.esm.json","clean":"rm -rf dist/","========= Formatting":"","format":"pnpm run format:biome","format:prettier":"git ls-files | egrep '\\.(json|js|jsx|css|ts|tsx|vue|mjs|cjs)$' | grep --invert-match package.json | xargs pnpm exec prettier --write","format:biome":"biome format --write .","format:check":"biome format . || echo Fix formatting by running: $ pnpm run format","========= Reset":"","reset":"git clean -Xdf && pnpm install && pnpm run build","========= Release":"","release":"release-me patch","release:commit":"release-me commit","start":"node server.js"},"devDependencies":{"@biomejs/biome":"^1.7.0","@brillout/part-regex":"^0.1.2","@brillout/release-me":"^0.3.8","@types/node":"^15.12.2","@types/react":"^18.0.9","@types/react-dom":"^18.2.4","prettier":"^3.2.5","react":"18.2.0","react-dom":"18.2.0","typescript":"^4.8.3","vitest":"^0.14.1"},"repository":{"type":"git","url":"git+https://github.com/brillout/react-streaming.git"},"license":"MIT","_id":"react-streaming@0.3.42","gitHead":"962b3f577bbffb98d11df18f66ad630751fae01a","types":"./dist/cjs/server/hooks.d.ts","bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"homepage":"https://github.com/brillout/react-streaming#readme","_nodeVersion":"20.12.2","_npmVersion":"10.5.0","dist":{"integrity":"sha512-HiJYIB9RgSB0iC7PuJLRn/a4qGo92ZkWooLdpLRbo5lRJwC9xriVTKZ8xz5EXiS/43O3wvnefrV8dS8oDtll9w==","shasum":"45da4d1e730198077455337dce00d0394c7cfcde","tarball":"https://registry.npmjs.org/react-streaming/-/react-streaming-0.3.42.tgz","fileCount":157,"unpackedSize":151978,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEd75CM+A/fqQsBZN8BDOW1JqYPT46vGRvTMxGUyBbxFAiEArV7jakEuGbmfV+KkdpBRY339kjIcbmc4LTJLErB91PQ="}]},"_npmUser":{"name":"brillout","email":"npm@brillout.com"},"directories":{},"maintainers":[{"name":"brillout","email":"npm@brillout.com"},{"name":"nitedani","email":"nitedani@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/react-streaming_0.3.42_1720473289700_0.37494275043240655"},"_hasShrinkwrap":false}},"time":{"created":"2022-03-15T13:27:19.401Z","modified":"2024-07-08T21:14:50.026Z","0.0.0-alpha.0":"2022-03-15T13:27:19.538Z","0.0.1":"2022-04-22T15:42:08.727Z","0.1.0":"2022-04-23T20:26:48.635Z","0.1.1":"2022-04-23T20:33:27.023Z","0.1.2":"2022-04-23T20:39:27.078Z","0.1.3":"2022-04-23T20:42:27.457Z","0.1.4":"2022-04-23T20:46:46.072Z","0.1.5":"2022-04-27T15:10:19.020Z","0.1.6":"2022-04-27T15:43:43.951Z","0.1.7":"2022-04-28T12:24:36.004Z","0.1.8":"2022-04-28T12:44:28.475Z","0.1.9":"2022-04-28T16:51:17.473Z","0.1.10":"2022-04-28T17:15:39.211Z","0.2.0":"2022-05-02T12:45:48.404Z","0.2.1":"2022-05-02T13:28:24.481Z","0.2.2":"2022-05-03T08:23:29.002Z","0.2.3":"2022-05-11T16:57:28.032Z","0.2.4":"2022-05-12T13:16:34.179Z","0.2.5":"2022-05-12T13:20:56.493Z","0.2.6":"2022-05-12T14:25:11.035Z","0.2.7":"2022-05-14T11:47:50.456Z","0.2.8":"2022-05-14T14:22:57.614Z","0.2.9":"2022-05-19T20:58:21.331Z","0.2.10":"2022-05-19T21:44:54.405Z","0.2.11":"2022-05-20T11:37:41.705Z","0.2.12":"2022-05-20T14:51:44.647Z","0.2.13":"2022-05-20T15:22:59.741Z","0.2.14":"2022-06-28T18:40:47.953Z","0.2.15":"2022-06-29T10:20:50.412Z","0.2.16":"2022-07-21T21:02:10.382Z","0.2.17":"2022-07-22T07:47:22.216Z","0.2.18":"2022-07-26T18:15:51.676Z","0.2.19":"2022-07-31T08:43:36.669Z","0.2.20":"2022-08-12T14:30:31.884Z","0.2.21":"2022-08-28T09:47:01.593Z","0.2.22":"2022-08-29T06:10:44.183Z","0.3.0":"2022-09-06T16:47:48.776Z","0.3.1":"2022-09-07T11:05:06.937Z","0.3.2":"2022-09-07T18:54:06.527Z","0.3.3":"2022-09-14T07:58:36.399Z","0.3.4":"2022-10-06T12:30:57.737Z","0.3.5":"2022-10-07T09:14:01.678Z","0.3.6":"2023-03-21T12:54:42.147Z","0.3.7":"2023-03-21T13:12:32.432Z","0.3.8":"2023-04-20T12:46:57.541Z","0.3.9":"2023-04-20T13:35:51.624Z","0.3.10":"2023-05-05T06:10:01.418Z","0.3.11":"2023-05-19T12:47:02.666Z","0.3.11-commit-fbcc062":"2023-06-02T09:12:48.495Z","0.3.11-commit-4b29944":"2023-06-02T09:24:01.408Z","0.3.11-commit-794dd95":"2023-06-02T09:33:05.915Z","0.3.12":"2023-06-02T09:35:55.904Z","0.3.13":"2023-06-03T21:53:56.798Z","0.3.14":"2023-06-04T07:52:28.488Z","0.3.15":"2023-10-16T08:19:55.119Z","0.3.16":"2023-11-15T14:14:36.272Z","0.3.17":"2023-12-07T17:46:42.719Z","0.3.18":"2023-12-11T16:03:26.917Z","0.3.19":"2024-01-06T14:32:43.422Z","0.3.19-commit-20b3bc7":"2024-02-01T16:36:41.419Z","0.3.20":"2024-02-01T19:21:53.980Z","0.3.21":"2024-02-10T07:36:15.319Z","0.3.22":"2024-02-10T08:18:20.911Z","0.3.23":"2024-02-24T10:52:47.077Z","0.3.24":"2024-03-08T21:04:31.416Z","0.3.25":"2024-04-16T20:35:21.092Z","0.3.26":"2024-04-17T08:55:52.577Z","0.3.27":"2024-04-18T11:12:54.482Z","0.3.28":"2024-04-19T07:50:43.288Z","0.3.29":"2024-06-27T09:17:20.811Z","0.3.30":"2024-06-27T21:49:47.290Z","0.3.31":"2024-06-27T22:15:32.898Z","0.3.32":"2024-06-28T08:49:09.930Z","0.3.32-commit-91eaf97":"2024-06-28T09:48:20.093Z","0.3.33":"2024-06-28T10:38:04.005Z","0.3.33-commit-2cf1712":"2024-07-02T14:07:38.759Z","0.3.33-commit-cf9cdf3":"2024-07-02T15:06:20.919Z","0.3.33-commit-914f21d":"2024-07-02T15:32:29.347Z","0.3.33-commit-485ed46":"2024-07-02T16:39:54.912Z","0.3.33-commit-bf88931":"2024-07-02T16:40:10.758Z","0.3.33-commit-e4365ee":"2024-07-02T18:20:36.849Z","0.3.33-commit-a6da6e2":"2024-07-02T18:25:32.997Z","0.3.33-commit-993864b":"2024-07-02T19:10:48.926Z","0.3.33-commit-e580257":"2024-07-02T20:13:12.815Z","0.3.34":"2024-07-03T08:45:52.198Z","0.3.35":"2024-07-03T08:46:43.087Z","0.3.36":"2024-07-03T12:14:56.815Z","0.3.37":"2024-07-03T18:40:13.804Z","0.3.38":"2024-07-04T09:04:48.766Z","0.3.39":"2024-07-04T09:59:06.292Z","0.3.40":"2024-07-04T10:47:10.511Z","0.3.40-commit-30e9b4d":"2024-07-05T09:34:07.888Z","0.3.40-commit-2aa5c83":"2024-07-05T11:19:59.773Z","0.3.40-commit-1854445":"2024-07-05T11:53:39.465Z","0.3.40-commit-195bab7":"2024-07-05T13:26:02.829Z","0.3.40-commit-d57fb4f":"2024-07-05T13:38:23.869Z","0.3.41":"2024-07-06T15:32:17.462Z","0.3.42":"2024-07-08T21:14:49.845Z"},"bugs":{"url":"https://github.com/brillout/react-streaming/issues"},"license":"MIT","homepage":"https://github.com/brillout/react-streaming#readme","repository":{"type":"git","url":"git+https://github.com/brillout/react-streaming.git"},"description":"React 18 Streaming. Full-fledged & Easy.","maintainers":[{"name":"brillout","email":"npm@brillout.com"},{"name":"nitedani","email":"nitedani@gmail.com"}],"readme":"<p align=\"center\">\n  <a href=\"/../../#readme\">\n    <img src=\"https://raw.githubusercontent.com/brillout/react-streaming/master/images/logo.svg\" height=\"145\" alt=\"React Streaming\"/>\n  </a>\n</p>\n\n# `react-streaming`\n\nReact Streaming. Full-fledged & Easy.\n\nFollow: [Twitter > @brillout](https://twitter.com/brillout)  \n\n> Unfamiliar with React Streaming? Check out [Dan's article about SSR and Streaming](https://github.com/reactwg/react-18/discussions/37).\n\n> ⚠️\n> While `react-streaming` is stable in itself (it's used in production and has good CI test coverage), note that React's SSR streaming support is still early and that the React team is working on high-level APIs that will make parts of `react-streaming` obsolete, see [@sebmarkbage comment at \"RFC: injectToStream\"](https://github.com/reactjs/rfcs/pull/219#issuecomment-1115398084).\n\n<b>Contents</b>\n\n- [Intro](#intro)\n- [Why Streaming](#why-streaming)\n- Usage\n  - [Get Started](#get-started)\n  - [Options](#options)\n  - [Bots](#Bots)\n  - [Error Handling](#error-handling)\n  - [`useAsync()`](#useasync)\n- Usage (Library Authors)\n  - [Overview](#overview)\n  - [`useAsync()` (Library Authors)](#useasync-library-authors)\n  - [`injectToStream()`](#injecttostream)\n  - [`doNotClose()`](#donotclose)\n  - [`hasStreamEnded()`](#hasstreamended)\n\n## Intro\n\n**Features (for React users)**\n\n- Unlocks `<Suspense>` for SSR apps.\n- `useAsync()`: easily fetch data for SSR apps.\n- Two SEO strategies: `conservative` or `google-speed`.\n- Seamless support for Node.js (serverless) platforms (Vercel, AWS EC2, ...) and Edge platforms (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...).\n- Easy error handling.\n\n**Features (for library authors)**\n\n- `useAsync()`: add data fetching capabilities to your library. High-level and easy to use.\n- `injectToStream()`: inject chunks to the stream for your library. Low-level and difficult to use, but highly flexible.\n\n**Easy**\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst {\n  pipe, // Node.js (Vercel, AWS EC2, ...)\n  readable // Edge (Cloudflare Workers, Deno Deploy, Netlify Edge, Vercel Edge, ...)\n} = await renderToStream(<Page />)\n```\n\n<br/>\n\n## Why Streaming\n\nReact 18's new SSR streaming architecture unlocks many capabilities:\n\n- Easily fetch data for SSR apps.\n- Fundamentally improved mobile performance. (Mobile users can progressively load the page as data is fetched, before even a single line of JavaScript is loaded. Especially important for users with a low-end device and poor internet connection.)\n- Progressive Hydration. (Page is interactive before even the page has finished loading.)\n\nProblem: the current React Streaming architecture is low-level and difficult to use.\n\nSolution: `react-streaming`.\n\n> `react-streaming` makes it easy to build the libraries of tomorrow, for example:\n>  - Use [Telefunc](https://telefunc.com) to fetch data for your Next.js or [Vike](https://vike.dev) app. (Instead of Next.js's `getServerSideProps()` / `Vike`'s `data()`.)\n>  - Better GraphQL tools, e.g. [Vilay](https://github.com/XiNiHa/vilay).\n\n<br/>\n\n## Usage\n\n### Get Started\n\n1. Install\n\n   ```shell\n   npm install react-streaming\n   ```\n\n2. Server-side\n\n   ```jsx\n   import { renderToStream } from 'react-streaming/server'\n   const {\n     pipe, // Defined if running in Node.js, otherwise `null`\n     readable // Defined if running on Edge (e.g. Cloudflare Workers), otherwise `null`\n   } = await renderToStream(<Page />)\n   ```\n\nThat's it.\n\n### Options\n\n```jsx\nconst options = {\n  // ...\n}\nawait renderToStream(<Page />, options)\n```\n\n- `options.disable?: boolean`: Disable streaming.\n  > `<Page>` is still rendered to a stream, but the promise `const promise = renderToStream()` resolves only after the stream has finished. (This effectively disables streaming from a user perspective, while unlocking React 18 Streaming capabilities such as SSR `<Supsense>`.)\n- `options.seoStrategy?: 'conservative' | 'google-speed'`\n\n  - `conservative` (default): Disable streaming if the HTTP request originates from a bot. (Ensuring bots to always see the whole HTML.)\n  - `google-speed`: Don't disable streaming for the Google Bot.\n    - Pro: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) rank your website higher because the initial HTTP response is faster.\n    - Con: Google may ([to be researched](https://github.com/brillout/react-streaming/issues/39)) not await the HTML stream (see [Bots](#Bots)).\n  - Custom SEO strategy: use `options.disable`. For example:\n\n    ```jsx\n    // Always stream, even for bots:\n    const disable = false\n\n    // Disable streaming for bots, except for the Google Bot and some other bot:\n    const disable =\n      isBot(userAgent) &&\n      !['googlebot', 'some-other-bot'].some(n => userAgent.toLowerCase().includes(n))\n\n    await renderToStream(<Page />, { disable })\n    ```\n\n- `options.userAgent?: string`: The HTTP [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent). (Needed for `options.seoStrategy`.)\n- `options.webStream?: boolean`: In Node.js, use a Web Stream instead of a Node.js Stream. ([Node.js 18 released Web Streams support](https://nodejs.org/en/blog/announcements/v18-release-announce/#web-streams-api-experimental).)\n- `options.streamOptions`: Options passed to React's [`renderToReadableStream()`](https://react.dev/reference/react-dom/server/renderToReadableStream#parameters) and [`renderToPipeableStream()`](https://react.dev/reference/react-dom/server/renderToPipeableStream#parameters). Use this to pass `nonce`, bootstrap scripts, etc. It excludes error handling options, use [Error Handling](#error-handling) instead.\n- `options.timeout?: number | null` (seconds): Timeout after which the rendering stream is aborted, see [Abort](#abort). Defaults to 20 seconds. Set to `null` to disable automatic timeout (we recommend to then implement a manual timeout as explained at [Abort](#abort)).\n- `options.onTimeout?: () => void`: Callback when the timeout is reached.\n- `options.onBoundaryError?: (err: unknown) => void`: Called when a `<Suspense>` boundary fails. See [Error Handling](#error-handling).\n-  ```tsx\n   const { streamEnd } = await renderToStream(<Page />)\n   // ✅ Page Shell succesfully rendered.\n   const success: boolean = await streamEnd\n   // Stream ended.\n   if (success) {\n     // ✅ <Page> succesfully rendered\n   } else {\n     // ❌ A <Suspense> boundary failed.\n   }\n   ```\n   Note that `streamEnd` never rejects.\n   > ⚠️\n   > Read [Error Handling](#error-handling) before using `streamEnd`. In particular, do not use `success` to change the behavior of your app/stream (because React automatically takes care of gracefully handling `<Suspense>` failures).\n\n\n### Bots\n\nBy default, `react-streaming` disables streaming for bots and crawlers, such as:\n- The [Google Bot](https://developers.google.com/search/docs/crawling-indexing/googlebot), which crawls the HTML of your pages to be able to show a preview of your website on Google's result pages.\n- The bot of social sites (Twitter/Instagram/WhatsApp...), which crawl the HTML of your pages to be able to show a preview of your website when it's shared on Twitter/Instagram/WhatsApp/...\n\n> [!NOTE]  \n> These bots explore your website by navigating the HTML of your pages. It isn't clear what bots do when they encounter an HTML stream ([to be researched](https://github.com/brillout/react-streaming/issues/39)); it's therefore safer to provide bots with a fully rendered HTML at once that contains all the content of your page (i.e. disable HTML streaming) instead of hoping that bots will await the HTML stream.\n\nFor `react-streaming` to be able to determine whether a request comes from a bot or a real user, you need to provide <a href=\"https://github.com/brillout/react-streaming#:~:text=disable%20%7D)-,options.userAgent,-%3F%3A%20string%3A%20The%20HTTP\">`options.userAgent`</a>.\n\n> [!NOTE]  \n> If you use [Vike](https://vike.dev) with [`vike-react`](https://github.com/vikejs/vike-react), you can simply set [`renderPage({ headersOriginal })`](https://vike.dev/renderPage#:~:text=the%20HTTP%20Headers-,headersOriginal,-%3A%20req.headers%2C) instead. (The [User-Agent request header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent) will then automatically be passed to `react-streaming`).\n\nYou can implement a custom strategy, see <a href=\"https://github.com/brillout/react-streaming#:~:text=%3CSupsense%3E.)-,options.seoStrategy,-%3F%3A%20%27conservative%27%20%7C%20%27google%2Dspeed\">`options.seoStrategy`</a>.\n\n\n### Error Handling\n\nThe promise `await renderToStream()` resolves after the page shell is rendered. This means that if an error occurs while rendering the page shell, then the promise rejects with that error.\n\n> :book: The page shell is the set of all components before `<Suspense>` boundaries.\n\n```jsx\ntry {\n  await renderToStream(<Page />)\n  // ✅ Page shell succesfully rendered and is ready in the stream buffer.\n} catch(err) {\n  // ❌ Something went wrong while rendering the page shell.\n}\n```\n\nThe stream returned by `await renderToStream()` doesn't emit errors.\n\n> :book: If an error occurs during the stream, then that means that a `<Suspense>` boundary failed.\n> Instead of emiting a stream error, React swallows the error on the server-side and retries to resolve the `<Suspense>` boundary on the client-side.\n> If the `<Suspense>` fails again on the client-side, then the client-side throws the error.\n>\n> This means that errors occuring during the stream are handled by React and there is nothing for you to do on the server-side. That said, you may want to gracefully handle the error on the client-side e.g. with [`react-error-boundary`](https://www.npmjs.com/package/react-error-boundary).\n>\n> You can use `options.onBoundaryError()` for error tracking purposes.\n\n#### Abort\n\nAfter a default [timeout](#options) of 20 seconds `react-streaming` aborts the rendering stream, as recommended by React [here](https://react.dev/reference/react-dom/server/renderToPipeableStream#aborting-server-rendering) and [there](https://react.dev/reference/react-dom/server/renderToReadableStream#aborting-server-rendering).\n\nWhen the timeout is reached `react-streaming` ends the stream and tells React to stop rendering. Note that there isn't any thrown error: React merely stops server-side rendering and continues on the client-side, see explanation at [Error Handling](#error-handling).\n\nYou can also manually abort:\n\n```tsx\nconst { abort } = await renderToStream(<Page />, { timeout: null })\nabort()\n```\n\n### `useAsync()`\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction Page({ movieId }) {\n  return (\n    <Suspense fallback={<p>Loading...</p>}>\n      <Movie id={movieId}/>\n    </Suspense>\n  )\n}\n\nasync function fetchMovie(id) {\n  const response = await fetch(`https://star-wars.brillout.com/api/films/${id}.json`)\n  return response.json()\n}\n\n// This component is isomorphic: it works on both the client-side and server-side. The\n// data fetched during SSR is automatically passed and re-used on the client-side.\nfunction Movie({ id }) {\n  const key = [\n    'star-wars-movies',\n    id // Re-run `fetchMovie()` if `id` changes\n  ]\n  const movie = useAsync(key, () => fetchMovie(id))\n  return (\n    <ul>\n      <li>\n        Title: {movie.title}\n      </li>\n      <li>\n        Release Date: {movie.release_date}\n      </li>\n    </ul>\n  )\n}\n```\n\nSee [`useAsync()` (Library Authors)](#useasync-library-authors) for more information.\n\n<br/>\n\n\n## Usage (Library Authors)\n\n### Overview\n\n`react-streaming` enables you to suspend the React rendering and await for something to happen. (Usually data fetching.)\nThe novelty here is that it's isomorphic:\n\n- It works on the client-side as well as on the server-side (while Serve-Side Rendering).\n- For hydration, data is passed from the server to the client. (So that data isn't loaded twice.)\n\nYou have the choice between:\n\n- `useAsync()`: High-level and easy.\n- `injectToStream()`: Low-level and highly flexible (`useAsync()` is based on it). Easy & recommended for injecting script and style tags. Complex for data fetching (if possible, use `useAsync()` instead).\n\n\n### `useAsync()` (Library Authors)\n\n> This section is a low-level description of `useAsync()`. For a high-level description, see [`useAsync()`](#useasync) instead.\n\n```jsx\nimport { useAsync } from 'react-streaming'\n\nfunction SomeComponent() {\n  const someAsyncFunc = async function () {\n    const value = 'someData'\n    return value\n  }\n  const key = ['some', 'invalidating', 'values']\n  // useAsync() suspends rendering until the promise returned by someAsyncFunc() resolves\n  const value = useAsync(key, someAsyncFunc)\n  assert(value === 'someData')\n}\n```\n\nWhen `<SomeComponent>` is rendered on the server-side (SSR), it injects the\nresolved value into the stream and the client-side picks up the injected value. This means that the\nclient-side doesn't call `someAsyncFunc()`: instead, the client-side re-uses the value resolved on\nthe server-side.\n\nIf you want `someAsyncFunc()` to be re-run, then change `key`. The `someAsyncFunc()` is only re-run if when the component is un-mounted and re-mounted, or if `key` changes. For example, changing the state of your component (e.g. with `useState()`) will *not* re-run `someAsyncFunc()` if you provide the same `key`.\n\nUsually the key is set to `['name-of-the-function', ...functionArguments]`.\n\n> You can think of `key` to serve a similar purpose to [React Queries's key](https://tanstack.com/query/v4/docs/guides/query-keys), and to the `deps` argument of React's [`useEffect(fn, deps)`](https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects).\n\n\n### `injectToStream()`\n\n```ts\ntype Chunk = string | Buffer\ntype Options = { flush?: boolean }\ninjectToStream(chunk: Chunk  | Promise<Chunk>, options?: Options)`\n```\n\nThe `injectToStream()` function enables you to inject chunks to the stream.\n\nThere are two ways to access `injectToStream()`:\n 1. With `renderToStream()`:\n    ```jsx\n    import { renderToStream } from 'react-streaming/server'\n    const stream = await renderToStream(<Page />)\n    const { injectToStream } = stream\n    ```\n 2. With `useStream()`:\n    ```js\n    import { useStream } from 'react-streaming'\n\n    function SomeComponent() {\n      const stream = useStream()\n      if (stream === null) {\n        // No stream available. This is the case:\n        // - On the client-side.\n        // - When `option.disable === true`.\n        // - When react-streaming is not installed.\n      }\n      const { injectToStream } = stream\n    }\n    ```\n\nUsage examples:\n\n```jsx\n// Inject JavaScript (e.g. for progressive hydration)\ninjectToStream('<script type=\"module\" src=\"/main.js\"></script>', { flush: true })\n\n// Inject CSS (e.g. for CSS-in-JS)\ninjectToStream('<styles>.some-component { color: blue }</styles>', { flush: true })\n\n// Pass data to client\ninjectToStream(`<script type=\"application/json\">${JSON.stringify(someData)}</script>`)\n```\n\nFor a full example of using `injectToStream()`, have a look at `useAsync()`'s implementation.\n\nIf setting `options.flush` to `true`, then the stream will be flushed after `chunk` has been written to the stream. This is only applicable for Node.js streams and only if you are using a compression library that makes a `flush()` method available. For example, [`compression` adds a `res.flush()` method](https://www.npmjs.com/package/compression#resflush). The option is ignored if there isn't a `flush()` method available.\n\n\n### `doNotClose()`\n\nTypical usage:\n\n```js\nconst makeClosableAgain = stream.doNotClose()\n// Ensure chunk is injected before the stream ends\ninjectToStream(chunk)\nmakeClosableAgain()\n```\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { doNotClose } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { doNotClose } = stream\n}\n```\n\n\n### `hasStreamEnded()`\n\nCheck whether the stream has ended.\n\nLike [`injectToStream()`](#injecttostream), there are two ways to access it:\n\n```jsx\nimport { renderToStream } from 'react-streaming/server'\nconst stream = await renderToStream(<Page />)\nconst { hasStreamEnded } = stream\n```\n```js\nimport { useStream } from 'react-streaming'\nfunction SomeComponent() {\n  const stream = useStream()\n  const { hasStreamEnded } = stream\n}\n```\n","readmeFilename":"README.md"}